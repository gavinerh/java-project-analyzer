AirRetroResponseBatchImpl.executeJob-46
    AirRetroResponseBatchImpl.processRetroResponse-93
        ValidatorImpl.getParticipantCodeByAbbr-179
            ReferenceData.getParticipantCodeByAbbr-306
                PrtMapper.getPrtCdGivenPrtAbbr
        ParticipantServiceImpl.validateParticipant-26
            ParticipantData.countParticipant-42
                PrtMapper.getCount--[returns countPrt: Integer]
        RetroFacadeImpl.validateResponseHdrPrtCd-152
            ParticipantServiceImpl.getParticipantDetails-51
                ParticipantData.retrieveParticipantDetails-53
                    PrtMapper.getAllGivenPrtCd--[returns prtList: List<Prt>]
                    [returns list: List<Participant>]
        RetroFacadeImpl.processFileResponse-40-[process retro response record]
            BatchAirRetroServiceImpl.processAirRetroResponse-41-[validates and does the necessary processing on the retro response]
                RetroCommonService.validateKFRefCode-78-[validates the KF Reference code that a record actually exists in AIR_RTR_KF_REQ and retrieves the retro claim from the table to  build the RetroRequest object]
                    RetroRequestData.retrieveByKFRefCode-270
                        AirRtrKfReqMapper.getAllGivenRefCd--[returns airRtrKfReqs: List<AirRtrKfReq>]
                        [constructs AirRetroClaimVO and customerSummary VO]
                        [returns aRetroRequest: RetroRequest]
                    RetroRequestData.retrieveNonAirRetroByKFRefCode-331
                        NairRtrKfReqMapper.getAllGivenRefCd--[returns naurRtrKfReqs: List<NairRtrKfReq>]
                        [constructs the CustomerSummaryVO and returns created RetroRequest]
                RetroCommonService.validateGracePeriod-180-[checks that the grace period is not exceeded when the response is received if date sent to participant is null, continue without checking grace period]
                    RetroRequestData.retrieveGracePeriod-316
                        PrtRtrParaMapper.getCloseGracePrd--[returns periods: List<Integer>]
                        [return the first integer in the list]
                RetroCommonService.validateResponseCode-258
                    RetroRequestData.countResponseCode-80
                        RtrRejCdMapper.getCountGivenRejCd--[returns countResponseCd: Integer]
                        [returns countResponseCd: Integer]
                BatchAirRetroServiceImpl.RetroResponseReject-463-[if response code is reject, reject the record in the database accordingly.]
                    AirRetroCommonService.verify_Air_Code_ShareBillParticipantForRetroResponse-187-[get stmt participant and billed prt]-[if transaction code = RI or RH and status = CR]
                        AirRetroCommonService.getCodeShareCombi-514
                            AirAccrualServiceImpl.determineCodeShare-62-[get pay principle, no other inner mtd calls, hierarchy done]                        
                            [if pay principle is not code share]
                                [construct own code share combi object and return]
                            AirRetroCommonService.getPayPrinciple-952
                                AirRetroCommonService.getRetroCodeShareCombi-915
                                    AirRetroClaimData.getRetroCodeShareCombi-131
                                        CdShareCombiMapper.getRetroCodeShareCombi--[returns List<CdShareCombi>]
                                        [returns CodeShareCombi]
                            AirRetroCommonService.getRetroCodeShareCombi-915-[hierarchy done]
                            AccrualValidatorImpl.getPrt-1450
                                AccrualData.getPrt-1457
                                    PrtMapper.getPrt--[returns List<Prt>]
                                    [extract Participant from list and return]
                            [if cdSharePrt == null]
                                RetroCommonService.getRetroException-45
                                    RetroRequestData.retrieveRejectReason-237
                                        RtrRejCdMapper.getRejDesc--[returns List<String> and extract first String to rejDesc var]
                                        RetroRequestData.retrieveRejectDesc-256
                                            MarmsPaiErrRecMapper.getPaiErrDesc--[get the description from the code]
                                            [return description]
                                        [return rejDesc]
                            [else]
                                AccrualValidatorImpl.getIATAPrt-1469-[inner mtds are mappers, hierarchy done]
                                [if cdSharePrt == null]
                                    RetroCommonService.getRetroException-45
                                        RetroRequestData.retrieveRejectReason-237-[hierarchy done]
                                [else]
                                    AirAccrualServiceImpl.getPayPrinciple-90
                                        AccrualValidator.getCodeShareCombi-1496
                                            AccrualData.getCodeShareCombi--[hierarchy done]
                                    AccrualValidatorImpl.getValidatorReferenceCode-1560-[returns hashmap of ctrl parameter]
                                        AirAccrualServiceImpl.getReferenceCode-130
                                            ControlParamData.getEmailDetailsFromCtrlPara-44
                                                [receives strFldIden String[]]
                                                [initialise hmMonitorEmailDetails: HashMap]
                                                [loop through the strFldIden string arr]
                                                    CtrlParaRefMapper.getValue--[return fldValue from each fldIdentifier]
                                                    [put fldValue into hmMonitorEmailDetails hashmap]
                                                [return hmMonitorEmailDetails hashmap]
                                    [set pay principle prt cd]                                                        
                    AirRetroCommonService.airTransDuplicateCheckForResponse-265-[check method for batch air response. This has more 'lenient' duplicate check logic]
                        AccrualValidatorImpl.checkAirDuplicate-1520
                            AccrualData.checkAirDuplicate-1373-[check in at_trans]
                                [receives flightInfo: CodeShareFlightInfo, ffpNo: String, constCreditDebit: String, progCd: String, travelCls: String, transCd: String, stmtPrt: String]
                                [if stmtPrt == flightInfo.carrier]
                                    [flightNo = flightInfo.flightNo]
                                [else]
                                    [flightNo = flightInfo.cdShareFlightNo]
                                [initialise acrPtsLst: List]
                                [if constCreditDebit == AccrualConstant.ConstCredit]
                                    [if transCd == AccrualConstant.ConstTxnCdSC]
                                        [newTransCd = S%]
                                    [else]
                                        [newTransCd = %C]
                                [else]
                                    newTransCd = transCd
                                AtTransMapper.checkAirDuplicate--[returns atTransList: List<AtTrans>]
                                [if atTransList is not empty]
                                    [loop through atTransList]
                                        [create CreditedPPSFFP and AccrualPoints, and add to acrPtsLst list]
                                [return acrPtsLst]
                            [if creditDebit == CREDIT]                        
                                OFFPAccrualData.checkOFFPDuplicate-212-[check in offp_bill_trans]
                                    [receives creditFFPLst: List, flightInfo: CodeShareFlightInfo, familyName: String, givenName: String, transCd: String, refId: String, paxId: String]
                                    [trim and update familyName and givenName variables]
                                    OffpBillTransMapper.checkOFFPDuplicate--[returns offpBillTransList: List<OffpBillTrans>]
                                    [loop through offpBillTransList]
                                        [initialise and populate CreditedPPSFFP and AccrualPoints, and add CreditedPPSFFP to creditFFPLst]
                                    [return creditFFPLst]
                            [if creditDebit == CREDIT && ffpNoDcs != null && ffpCdDcs != null]
                                OFFPAccrualData.checkOFFPCdDuplicate-157
                                    [receives creditFFPLst: List, flightInfo: CoeShareFlightInfo, transCd: String, ffpNoDcs: String, ffpCdDcs: String]
                                    OffpBillTransMapper.checkOFFPCdDuplicate--[returns offpBillTransList: List<OffpBillTrans>]
                                    [loop through offpBillTransList]
                                        [initialise CreditedPPSFFP, AccrualPoints and add to creditFFPLst]
                                    [return creditFFPLst]
                    AirRetroCommonService.constructAccrualPax-402-[if duplicate found in at trans table]
                        AirRetroCommonService.getCodeShareCombi-514-[hierarchy done]
                    BatchAirRetroServiceImpl.processTD-1045-[if at trans mode is F or R, hierarchy done]
                    // to continue but not important since it is a reject condition
                BatchAirRetroServiceImpl.commitAirRetro-706
                    RetroRequestData.updateAirRetroForResponse-160-[just mapper methods]
                        [receives anAirRetroClaim: AirRetroClaim, aRetroRequester: CustomerSummary, userId: String, expiredAcctFlg: String]
                        [initialise timestamp = anAirRetroClaim.receiveDtFrmParticipant]
                        [check table AIR_RTR_KF_REQ if data is modified]
                        AirRtrKfReqMapper.updateAirRetroForResponse
                        [initialise mapParam: HashMap]
                        [send event data]
                RetroCommonService.validateRetroTransactionCode-424-[checks for invalid or null transaction code in the retro response]
                    [validates parameters, no methods called]
                RetroCommonService.verifyCustAcctStatusEligibleForRetro-303
                    RetroRequestData.get_Retro_AccStatus_FuncEligibility-90-[returns eligibleCol: List]
                        [receives program: String, participantCode: String, functionCd: String, accStatus: String]
                        [initialise rsList: List]
                        AcctStatusFuncMapper.getEligibilityFlgAndRtrCrdInd--[returns list: List<AcctStatusFunc>]
                        [loop through the list]
                            [add eligibleFlg and rtrCrdInd to rsList]
                        [return rsList]
                    [if eligibleCol not empty]
                        [if acc status not eligible for retro]
                            [if acct suspended, update error code]
                            [else if acct expired]
                                [if expiredDate == null]
                                    CustomerServiceImpl.getCustomerAccount-537
                                        CustomerAcctData.getCustomerAccount-190
                                            [initialise customerAccountList: List]
                                            CusAccountMapper.getCustomerAccount--[returns cusAccountList: List<CusAccount>]
                                            [loop through the cusAccountList]
                                                [initialise customerAcct: CustomerAcct]
                                                [update customerAcct fields and add to customerAccountList]
                                            [return customerAccountList]
                                [get activity date]
                                [compare expiry date against flight date]
                    [else]
                        [update error code]
                    [returns error code]
                AirRetroCommonService.verifyCarrierCode-40
                    [check the parameter, calling no other methods]
                BatchAirRetroServiceImpl.processAirRetro-748-[processes air retro claims returned in the response file from OA]
                    AirRetroCommonService.createCodeShareFlightInfo-60
                        [populate codeShareFlightInfo obj from parameters]
                        AirAccrualServiceImpl.determineCodeShare-62-[hierarchy done]
                        AirRetroCommonService.isFlightEligibleForPPS-997-[no inner mtds, hierarchy done]
                    AirRetroCommonService.verify_Air_Code_ShareBillParticipantForRetroResponse-187
                        AirRetroCommonService.getCodeShareCombi-514-[hierarchy done]
                    BatchAirRetroServiceImpl.updateRetroTicketClass-1105-[Detects for any changes to the travel class indicated in the retro response and updates the relevnt class entry based on the billed]-[get here if travel class is not null]
                        [if tkt carrier and bp carrier is same, but travel class in response is different to the flown class (BP class), update the response travel class to the bp class]
                        [else if billed participant is BP carrier, and travel class in response is diff to flown class (BP class), update the response travel class to BP class]
                        [else if billed participant is tkt carrier, and travel class in response is diff to booked compartment class (tkt class), update response travel class to tkt class]
                    AirRetroCommonService.constructAccrualPax-402
                        AirRetroCommonService.getCodeShareCombi-514-[hierarchy done]
                        AirRetroCommonService.constructAccrualTrans-619
                            AirRetroCommonService.createCodeShareFlightInfo-60-[hierarchy done]
                            [if claiming for KF, FFPCodeDCS must be set to SQ, if claiming for OFFP, FFPCodeDCS must be set to OFFP Participant]
                            [accrual based on scoot]
                            [OFFP accrual]
                            [corporate accual]
                    ParticipantServiceImpl.getParticipantDetails-51-[hierarchy done]
                    AirRetroCommonService.airTransDuplicateCheckForResponse-265-[hierarchy done]
                    [if responseCd is accp]
                        [if transCd == accept && retroStat == credit || transCd == hold && retroStat == credit || transCd == accept && retroStat == extracted]
                            [if duplicate record found && if the credited class in AT_TRANS is different to travel class in response]
                                BatchAirRetroServiceImpl.processTD-1045-[hierarchy done, set ammendment reason code as wrongly credited]
                                BatchAirRetroServiceImpl.processTC-1174-[hierarchy done, set ammendment reason code as null]
                            [else if transCd == accept && retroStat == hold]
                                setStatus[not a method, just acting on a variable]
                            [else - duplicate record in at trans not found]
                                BatchAirRetroServiceImpl.processTC-1174-[hierarchy done]
                        [else if transCd == accept && retroStat == forceCR]
                            throw error
                        [if transCd == hold && retroStat == extractedHold || retroStatus == statusNEW]
                            [if found duplicate record in at trans]
                                [if mode == F || mode == R]
                                    setStatus
                                [else]
                                    throw error
                            [else]
                                BatchAirRetroServiceImpl.processTC-1174-[hierarchy done]
                BatchAirRetroServiceImpl.commitAirRetro-706-[after this step is catching of exceptions]
                    RetroRequestData.updateAirRetroForResponse-160-[hierarchy done]
            MarmsRetroServiceImpl.sendAcknowledgementEmailToCustomerNew-41-[hierarchy about sending email]
            [if resultMap != null && resultMap not empty]
                [if processMsg != null]
                    return resultMap.get("fileresponse")
                [else]
                    [if isToAwardPromo]
                        RetroFacadeImpl.awardRetroPromotionOnline-87-[sends request to queue]-[hierarchy done]
                    [else if isToReversePromo]
                        RetroFacadeImpl.awardRetroPromotionAfterReversal-96-[sends request to async method]-[hierarchy done]


RetroFacadeImpl.awardRetroPromotionOnline-87
    [check if the retroModeInd is normal retro or force credit]
    [check if is air or non-air]
    PromotionAwardingFacadeImpl.awardPromotions-133
        PromotionAwardingFacadeImpl.validateEligibilityRecord-237
            [if eligibilityRecord == null, throw error]
            [if userId == null || empty string, throw error]
            [if kickedOffBy == null || empty string, throw error]
            [else if kickedOffBy == PX && refId == null or empty string, throw error]
            [else if kickedOffBy == TR || BR && batchId == null || empty string, throw error, batchDate == null, throw error]
            [else if kickedOffBy == NR && transIds == null or empty string, throw error]
            [else if kickedOffBy == FC && paxAndRefIdMap == null or empty map, throw error]
            [else throw error as kickedOffBy does not match any values]
        [if not forceCredit and not pax manifest]
            [set promo type to AC]
            PromotionAwardingFacadeImpl.awardPromotion-177
                PromotionAwardingImpl.extractEligibleRecordsForActivePromotions-51
                    PromotionAwardingData.extractEligibleRecordsForActivePromotions-495
                        [receives eligibilityRecord: PromotionEligibilityRecord]
                        PromotionAwardingData.getActivePromotionsForEligibility-2796-[returns activePromotions: ArrayList, get active promotions for air or nonAir]
                            [receives eligibilityRecord: PromotionEligibilityRecord]
                            [initialise query: StringBuffer transIdBuffer: StringBuffer, refIdBuffer: StringBuffer, batchDt: String, count: int]
                            [if isForAirTracking == true]
                                [if kickedOffBy == TR || kickedOffBy == BR]
                                    [count++]
                                [else if kickedOffBy == PX]
                                    [count++]
                                [else if kickedOffBy == NR]
                                    [count++]
                                    [if transIds not empty]
                                        [loop through transIds and append to transIdBuffer]
                                [else]
                                    [for force credit]
                                    [if paxAndRefIdMap not empty]
                                        [count++]
                                        [append refId to refIdBuffer]
                            [else]
                                [for nonair]
                                [if kickedOffBy == TR || kickedOffBy == BR]
                                    [count++]
                            [if count == 0]
                                [return empty arrayList]
                            AtTransMapper.getActivePromotionsForEligibility--[returns list]
                            [initialise finalResult: List]
                            [if list is not empty]
                                [loop through the list]
                                    [extract prtCd, orgCd, desCd, minDatte, maxDate from the list]
                                    [if minDate not null && maxDate not null]
                                        PromotionAwardingData.getActivPromotionsForGivenDates-2935-[returns result: List]
                                            [minDate: Date, maxDate: Date, promoType: String, isAirTracking: boolean, prtCd: String, orgCd: String, desCd: String]
                                            [initialise result: ArrayList, promoCds: List<String>]
                                            [if promoType == RD || isAirTracking == false]
                                                PrmMasterMapper.getActivPromotionsForGivenDatesPromoTypeRD--[returns list List<String>]
                                                [loop through list and add each item to result]
                                            [else]
                                                [if promoType != AQ]
                                                    PrmMasterMapper.getActivPromotionsForGivenDatesPromoTypeNotAQ--[returns promoCds: List]
                                                [else]
                                                    PrmMasterMapper.getActivPromotionsForGivenDatesPromoTypeAQ--[returns promoCds: List]
                                                [loop through the promoCds list and add to result list]
                                            [return result and end]
                                        [loop through result]
                                            [if finalResult does not contain each valueObj of the result]
                                                [add the valueObj to the finalResult]
                                    [else]
                                        [if kickedOffBy == NR]
                                            [populate the transIdBuffer]
                                        AtTransMapper.getTransXrefIdAndPromoProcessFlg--[return List<AtTrans>]
                            [return finalResult and end]
                        [initialise members: Hashtable]
                        [if promoType == AC]
                            PromotionAwardingData.getMembersForPromotion-2746-[returns Hashtable]
                                [eligibilityRecord: PromotionEligibilityRecord from parameter]
                                [initialise dateFormatter: SimpleDateFormatter, members: Hashtable]
                                [if batchDate, batchId, refIds, transIds are null or empty]
                                    [return members and end]
                                [initialise batchDate with eligibilityRecord.batchDate]
                                AtTransMapper.getMembersForPromotion--[returns list: List<AtTrans>]
                                [loop through the list]
                                    [extract intId: double from each iteration]
                                    [convert atTrans: AtTrans to details: PromotionActivityDetails obj]
                                    [if members hashtable does not contains key -- intId]
                                        [add the details obj to the members table]
                                [return members]
                        [initialise codeList: ArrayList, isListPresent: boolean, worldpromo: boolean, intId: String, paxId: String]
                        [loop through activePromotions list]
                            [get promotionCode: String from each iteration]
                            [PromotionSetupData.m_PromotionCode = promotionCode]-[hierarchy not important]
                            [if promoType == AC]
                                PromotionAwardingData.getOrginDestination-2694-[returns codeList given promotionCode]
                                    [promoCd: String from parameter]
                                    [initialise codeList: ArrayList, orgCode: String, desCode: String, orgSegCode: String, desSegCode: String]
                                    PrmWzdItinDtlsMapper.getOrginDestination--[return list: List<PrmWzdItinDtls>]
                                    [if list is not empty]
                                        [loop through list and extract orgCode and desCode]
                                            [if orgCode != UD || desCode != UD]
                                                [add orgCode and desCode to codeList]
                                    [if orgCode == UD || desCode == UD]
                                        PrmWzdItinSgmtDtlsMapper.getOrginDestination--[returns sgmtList: List<PrmWzdItinSgmtDtls>]
                                        [loop through sgmtList and add orgCd and desCd to codeList]
                                    [return codeList]
                            [loop through codeList]
                                [if "WORLD" exist in the codeList]
                                    [worldpromo = true]
                            PromotionSetupData.load-159-[get promotionDetails: Promotion]
                                PrmMasterMapper.getDetails--[return prmMasterList: List<PrmMaster>]
                                [create Promotion obj and populate fields with PrmMaster obj]
                                [return Promotion obj as ValueObject]
                            [if promotionDetails.ruleInfo.size > 0]
                                [if promotionDetails.eligibilityList not null]
                                    [isListPresent = true]
                                [if worldpromo == true and isListPresent == false]
                                    [if members hashtable is not empty]
                                        [loop through the members]
                                            [get activityVector from members hashtable given memNo]
                                            [get details: PromotionActivityDetails from activityVector]
                                            PromotionAwardingData.isMemberSatisfiedAllRules-2591-[returns boolean]
                                                [memNo: String, promotion: Promotion, activityDetails: Vector from parameter]
                                                [initialise completionQuery: StringBuffer, isSatisfiedNonAir, isSatisfiedSegment, isSatisfiedQuery, isNonAir, isSegment, flag all boolean]
                                                [generate completionQuery]
                                                [if rule.code starts with N]
                                                    [isNonAir = true]
                                                    PromotionAwardingData.isMemberCompletedNonAirActivity-6726
                                                        [receives rule: Rule, activityDetails: Vector, miles: double[]]
                                                        [generate completionQuery]
                                                        [if completionQuery does not return an empty list]
                                                            PromotionAwardingData.calculateRuleAward-7111
                                                                [receives rule: Rule, activityDetails: Vector, miles: double[], (distanceQuery, pointsQuery, combinationPointsQuery, combinationDistanceQuery) StringBuffer]
                                                                [populate the miles array and return]
                                                            [return true]
                                                        [update the values of miles arr to 0]
                                                        [return false and end]
                                                    [if isMemberCompletedNonAirActivity == true]
                                                        [isSatisfiedNonAir = true]
                                                    [else: isSatisfiedNonAir = false]
                                                [else if rule.code starts with S]
                                                    [isSegment = true]
                                                    PromotionAwardingData.isMemberSatisfiedSegmentRule-6612
                                                        [generate completionQuery and query db, returns a list]
                                                            PromotionAwardingData.getRuleDetails-7075
                                                                [depending on whether id ruleType == Air || NonAir || Segment, call the method on the next line]
                                                                [if ruleType is not Air, NonAir, or Segment, return false]
                                                                AirRuleMasterMapper.getRuleDetails--[returns list]
                                                                [if list is empty, return false]
                                                                [if ruleType == Air]
                                                                    AirRuleSetupDate.load-33
                                                                        AirRuleMasterMapper.load--[return list: List<AirRuleMaster>]
                                                                        [convert the first value of the list to AirRule obj and return]
                                                                [else if ruleType == NonAir]
                                                                    NonAirRuleSetupData.load-30
                                                                        NonAirRuleMasterMapper.load--[returns list: List<NonAirRuleMaster>]
                                                                        [extract first value from the list and convert it to NonAirRule obj and return it]
                                                                [else if ruleType == Segment]
                                                                    SegmentRuleSetupData.load-28
                                                                        NonActvtRuleMapper.load--[returns list: List<NonActvtRule>]
                                                                        [extract first value from the list and convert it to SegmentRuleMaster obj and return it]
                                                        [if list is empty, returns false]
                                                        [else return true and end]
                                                    [if isMemberSatisfiedSegmentRule == true]
                                                        [isSatisfiedSegment = true]
                                                    [else: isSatisfiedSegment = false]
                                                [if completionQuery is executed and does not return an empty list]
                                                    [isSatisfiedQuery = true]
                                                [if isNonAir == true]
                                                    [if isSatisfiedQuery and isSatisfiedNonAir == true]
                                                        [return true]
                                                [else if isSegment == true]
                                                    [return true]
                                                [else: return false]
                                                [end]
                                            [if the previous statement returns true]
                                                PromotionAwardingData.getEligiblityCheckQueryForWorldPromotion-1465
                                                    [receives promotion: Promotion, eligibilityRecord: PromotionEligibilityRecord, memNo: String, paxId: String]
                                                    [initialise result: StringBuffer, promoRules: Vector, isActvtRuleExist: boolean]
                                                    [if isForAirTracking]
                                                        [generate air sql query]
                                                        [isActvtRuleExist = true]
                                                    [else]
                                                        [generate non-air query]
                                                        [if rule.code starts with N && promoType != SA]
                                                            [isActvtRuleExist = true]
                                                    [if isActvtRuleExist == false && promoType == AQ]
                                                        PromotionAwardingData.getEligibilityQueryForAcqPromotionWithOutRules-2479
                                                            [generate sql query and return]
                                                        [return query string]
                                                    [return result]
                                                PromotionAwardingData.insertEligibleRecordsIntoWkgTable-1039-[insert the data returned from previous statement]
                                                    [receives eligiblityQuery: String, promoCd: String, promoType: String]
                                                    [if eligiblityQuery not empty string]
                                                        PrmAwdWkMapper.insertEligibleRecordsIntoWkgTable-[returns response: int]
                                                        [if response > 0 && promoType == SA]
                                                            PromotionAwardingData.calculateDistanceTravelled-1122
                                                                PrmAwdWkMapper.calculateDistanceTravelled--[returns list: List<PrmAwdWk>]
                                                                [if list is empty: return]
                                                                [else]
                                                                    [loop through the list]
                                                                        PromotionAwardingData.getLatitudeAndLongitude-1146-[returns origin and destination]
                                                                            AirportMapper.getLatitudeAndLongitude--[return list: List<Airport>]
                                                                            [return airport Latitude And Longitude]
                                                                        [calculate the distance from origin to destination]
                                                                        PrmAwdWkMapper.updateDistanceTravelled
                                                                [end]
                                                    [end]
                                [else]
                                    PromotionAwardingData.getEligiblityCheckQueryForPromotion-626
                                        [receive promotion: Promotion, eligibilityRecord: PromotionEligibilityRecord]
                                        [initialise result: StringBuffer, promoRules: Vector]
                                        [if isForAirTracking]
                                            [get query for air tracking]
                                        [else]
                                            [get non-air query]
                                        [if isActvtRuleExist == false && promoType == AQ]
                                            [get eligibility query for promotion without rules]
                                            PromotionAwardingData.getEligibilityQueryForAcqPromotionWithOutRules-2479-[hierarchy done]
                                            [return returned String from the previous method]
                                        [return result]
                                    PromotionAwardingData.insertEligibleRecordsIntoWkgTable--[inserts data returned from the previous statement, hierarchy done]
                            [else if promoType == AQ && promotionDetails.acqActvtMilesAwardInfo.size > 0]
                                PromotionAwardingData.getEligibilityQueryForAcqPromotionWithOutRules-2479-[hierarchy done]
                                PromotionAwardingData.insertEligibleRecordsIntoWkgTable--[inserts data returned from the previous statement, hierarchy done]
                        [end]
                PromotionAwardingFacadeImpl.getAwardableMembers-309
                    PromotionAwardingData.getAwardableMembers-4093-[return List]
                        PromotionAwardingData.getActivePromotionsForAwarding-4109-[return list]
                            [receives eligibilityRecord: PromotionEligibilityRecord]
                            [initialise query: StringBuffer, batchDate: String, count: int, transIdBuffer: StringBuffer, refIdBuffer: StringBuffer, promoCds: List<String>]
                            [if isForAirTracking]
                                [if kickedOffBy == TR || BR]
                                    [count++]
                                [else if kickedOffBy == PX]
                                    [count++]
                                [else if kickedOffBy == NR]
                                    [count++]
                                    [get transIds and append to transIdBuffer]
                                [else]
                                    [count++]
                                    [if paxAndRefIdMap not empty]
                                        [loop over paxAndRefIdMap]
                                            [extract redId from each iteration, check if refIdTable does not contain redId, add it to refIdTable and refIdBuffer]
                                [if count == 0]
                                    [return empty arrayList]
                                PrmMasterMapper.getActivePromotionsForAirAwarding--[return promoCds]
                            [else]
                                [non air]
                                [if kickedOffBy == TR || BR]
                                    [count++]
                                [if count == 0]
                                    [return empty arrayList]
                                PrmMasterMapper.getActivePromotionsForNonAirAwarding--[returns promoCds]
                            [initialise new arrayList, and add the objects in promoCds list to the arrayList and return]
                        PromotionAwardingData.getAwardableMembersFromWorkingTable-4202
                            [receives activePromotions: List, eligibilityRecord: PromotionEligibilityRecord, highestPromotions: List]
                            [initialise awardableMembers: List, acqAwardableMembers: Hashtable, eligibleHighestPromotions: Hashtable, completedHighestPromotions: Hashtable, promotionSetup: PromotionSetupData]
                            [loop through activePromotions]
                                PromotionSetupData.load-[return promotionDetails: Promotion]-[hierarchy done]
                                [check if pps promotion is true]
                                [if promotionDetails.type == AQ && promotionDetails.AcqActvtMilesAwardInfo.size > 0]
                                    PromotionAwardingData.getAwardableMembersForAcquisitionPromotion-[returns acqAwardableMembers]-5706
                                        [receives promotionDetails: Promotion, eligibilityRecord: PromotionEligibilityRecord as parameters]
                                        PromotionAwardingData.getEligibleMembersForPromotion-4733-[returns a hashtable of members, hierarchy done]
                                        [loop through the members]
                                            [initialise activityVector from members, and duplicate activityVector to a tempVector obj]
                                            [if promotionDetails.ruleInfo.size > 0]
                                                PromotionAwardingData.isMemberCompletedThePromotion-5764-[returns boolean]
                                                    [generate completion, distance, points, combinationDistance, combinationPoints sql queries]
                                                    PromotionAwardingData.calculatePromotionAward-5891-[returns boolean]
                                                        [receives distanceQuery, pointsQuery, promotion, combinationDistanceQuery, combinationPointsQuery]
                                                        [receives activityDetails, rulePoints, awardDetails, bonus, memNo]
                                                        The method starts by initializing several local variables and processing promotion data.
                                                        It then checks if the promotion has any miles award information and calculates the promotion bonus, elite bonus, and PPS bonus [Priority Passengers] based on the award details.
                                                        The method iterates through activity details vector and identifies eligible promotions for a member based on rule codes.
                                                        If the eligible sequence is not present, it assigns the highest value of distance or points to the sequence.
                                                        It calculates the total promotion and total elite promotion bonus and stores transaction dates, ids, and rule details.
                                                        Iterates through the promotion's billing information for regular members, elite members, and PPS members and sets the billing details for each participant based on their awards.
                                                        If required, it sets the NonMilesAward information which is not based on miles.
                                                        Checks if the rule allows applying StopOverSatisfied promotions and if it satisfies the rule, assigns the bonus to the member.
                                                        Finally, it returns a boolean value true if a promotion bonus is applied; otherwise, it returns false, and bonus[0] is set to 0d.
                                                [if isMemberCompletedThePromotion]
                                                    [if award.transIds.size != 0]
                                                        [loop through award.transIds]
                                                            [loop through tempVector]
                                                                [for each iteration of tempVector obj, check if the transId matches, add to activityVector]
                                                    [put the activityVector into acqAwardableMembers]
                                            [else]
                                                [put activityVector into acqAwardableMembers]
                                        [return acqAwardableMembers]
                                    PromotionAwardingData.getAcqAwardableMembers-4775-[returns list and added to awardableMembers]
                                        [internal method called]
                                            PromotionAwardingData.prepareAwardForAcquisition-4944
                                                The method first processes various flags and information related to the promotion, such as PPS promotion eligibility, PPS bonus, flown class, segment value, and other relevant data.
                                                It then calculates the bonus and elite bonus miles using getAcqMilesAward and getAcqEliteMilesAward methods, and it computes any non-miles awards using the getAcqNonMilesAward method.
                                                Afterward, the method initializes a new PromotionAward object and sets its attributes based on the results obtained from the previous calculations.
                                                It also checks if the introducer has exceeded the maximum allowed miles awards or non-miles awards for the promotion. If so, the method returns null. If not, the PromotionAward object gets updated with the billing participant information, and other attributes are set accordingly.
                                                Finally, if the member is an introducer, the method checks if the introducer has exceeded the maximum number of allowed introducees for the promotion. If not, the PromotionAward object is returned. If the introducer has exceeded the maximum limit, the method returns null.
                                        The method starts by initializing an empty ArrayList called awardableMembers which will store the PromotionAward objects for each valid member. It then checks if the members hashtable is not empty and iterates through each member.
                                        For each member, the method calculates whether they are eligible for the promotion by iterating through promotion.getAcqActvtMilesAwardInfo(), which returns a list of MilesAward objects containing the rules for each promotion.
                                        It also checks if there are any NonMilesAward objects available for the promotion and keeps track of various flags and counters related to the process.
                                        The core of the method is in the nested loop iterating through the actvtVector, which contains the activity details for each member. Here, the method checks if the member is eligible for the award based on defined rules, and if so, it creates a new PromotionAward object 
                                        by calling the prepareAwardForAcquisition method, updating relevant flags and counters, and finally adds the PromotionAward object to awardableMembers.
                                        Once all eligible members have been processed, the method returns the awardableMembers list containing the PromotionAward objects for each valid member.
                                [else if promotionDetails.ruleInfo.size > 0]
                                    PromotionAwardingData.getEligibleMembersForPromotion-4733-[returns members: Hashtable]-todo
                                    [if members not empty]
                                        [loop through the members table]
                                            [get the memNo: key, activityVector: value]
                                            [check if pax id is present]
                                            [if activityVector.size > 1 && isPPSPromotion]
                                                [loop through activityVector]
                                                    PromotionAwardingData.isActivityToBeRemoved-4710
                                                        PrmAwdWkMapper.isActivityToBeRemoved--[return count]
                                                        [if count > 0, return true]
                                                        [else return false, end]
                                                    [if eligibilityRecord.isPPSPending == false]
                                                        [if activityToBeRemoved == true, update act value]
                                                        [else]
                                                            [increase value of act by 1]
                                                    [else]
                                                        [if activityToBeRemoved == true && isPaxIDPresent]
                                                            [update act value depending on paxId and initial value of act]
                                            [create award: PromotionAward]
                                            [loop through activityVector]
                                                [initialise bonus: double[]]
                                                PromotionAwardingData.isMemberCompletedThePromotion-5764-[returns boolean]-todo
                                                [if the method above returns true]
                                                    [initialise and populate the transIds and refIds in stringBuffers]
                                                    [if promotionDetails.type == QL]
                                                        [update award var and add to awardableMembers list]
                                                    [else]
                                                        [if promotionDetails.awardType != H]
                                                            [add award to awardableMembers list]
                                                        [else]
                                                            [add to highest list]
                                                [else if promotionDetails.awardType == H && promotionDetails.type != QL]
                                                    [add promotionCode to eligibleHighestPromotions]
                                                    [break loop]
                                                [else]
                                                    [break loop]
                                [else]
                                    PromotionAwardingData.getAwardablePreSelectedMembers-4632-[returns list]-todo
                                    [add the result returned from the above method to awardableMembers]
                            PromotionAwardingData.getCompletedHighestPromotions-4500-[return arrayList]-todo
                            [add the result returned from above method to awardableMembers]
                            [add eligibleHighestPromotions and completedHighestPromotions to highestPromotions]
                [if eligibilityRecord.promoType == QL]
                    PromotionAwardingImpl.awardPromotionFFPEliteBonus-86
                        PromotionAwardingImpl.checkPromotionMaxLimitReached-490-[returns boolean]
                            PromotionAwardingData.checkPromoMaxLimitReached-todo
                        PromotionAwardingImpl.checkCustomerAccountStatus-468-[returns boolean]
                            CustomerAcctHandlerImpl.getCustomerAccountByIntID-40
                                [if programCode == null or empty string]
                                    [throw error]
                                CustomerAcctHandlerImpl.getcustomerID-69-[returns customerID]
                                    CustomerIDHandlerImpl.getCustomerID--[hierarchy done]
                                [if customerID == null or empty string]
                                    [throw error]
                                CustomerAcctData.getCustomerAccountByIntID-todo
                            CustomerServiceImpl.verifyAcctStatusFuncEligibility--[hierarchy done]
                            [end]
                        PromotionAwardingImpl.checkCustomerType-455-[returns boolean]
                            CustomerServiceImpl.getCustomerParticulars--[hierarchy done, returns customerParticulars obj]
                            [if returned customerParticulars.getSpecialCustomerType != null]
                                CustomerServiceImpl.verifyCustomerTypeFunc--[hierarchy done, returns a boolean]
                                [returns the boolean from prev statement and end]
                        [if the prev 2 boolean returned are both true]
                            [check for duplicate, use the trans id from awd map to check for duplicate]
                            PromotionAwardingData.getCountForDuplicateCheck--[returns dupCheck]-todo
                            PromotionAwardingData.checkForNewDupAward--[returns dupRes]
                            [if !dupRes && !dupCheck]
                                PromotionAwardingImpl.awardFFPEliteMiles-214
                                    [receives award: PromotionAward]
                                    [set ppsPromoFlg if null]
                                    [loop through the billingPrtcpnts map]
                                        [retrieve strBonus: String from award.getBillingPrtcpnts]
                                        [initialise eliteIndex: int, by getting the index position of "E"]
                                        [initialise ppsIndex: int, by getting the index position of "P"]
                                        [initialise promoBonus: double and promoBonusPPS: double]
                                        [if award.ptsValidityPeriod > 0]
                                            [check = true]
                                        [if (!((award.getAwardType() != null && award.getAwardType().equals("MN")) && (award.getPromoType() != null && award.getPromoType().equalsIgnoreCase("AC")))) || !check]
                                            [if award.promoType == AC]
                                                ReferenceServiceImpl.getExclNonExpMilesFlg-40-[returns expFlg: String]
                                                    ParticipantData.getNonExpMilesFlg-todo
                                                [if expFlg == null || expFlg == N]
                                                    ReferenceServiceImpl.getValidityPrdFromCusId-56-[returns valPrd: int, hierarchy done]
                                                [set the ptsValidityPeriod]
                                            [else]
                                                PromotionAwardingData.getPointsValidityPeriod--[returns the validityPeriod: int, set in ptsValidityPeriod]-todo
                                        [else if (award.getAwardType() != null && award.getAwardType().equals("MN")) && (award.getPromoType() != null && award.getPromoType().equalsIgnoreCase("AC"))]
                                            [if billingPrtp not null]
                                                ReferenceServiceImpl.getExclNonExpMilesFlg-40-[hierarchy done, returns expFlg]
                                                [if expFlg == null || expFlg == N]
                                                    ReferenceServiceImpl.getValidityPrdFromCusId-56-[hierarchy done, returns valPrd]
                                                [if valPrd != NON_EXPIRY_VALIDITY_PRD]
                                                    [valPrd = award.ptsValidityPeriod]
                                            [set ptsValidityPeriod]
                                        PromotionAwardingData.getParticipantType--[return string to setPrtpTypeInd]-todo
                                        [set statementPrtpCd]
                                        [if promoBonus - prmBonus > 0]
                                            prmBonus += 1
                                        [update prmBonusEllite]
                                        [update promoBonusPPS]
                                        [if award.awardType != EN && != MN]
                                            PromotionAwardingData.retreivePromoTransId--[returns promoTransXRefId]-todo
                                        [if promoTransXRefId != null]
                                            [isPPSPending = true]
                                        [if promoBonusPPS > 0 && isOFFP == false || (isPPSPending == true && awardType != EN && awardType != MN && actualPPSPromoFlg == Y && isIntroducer == true && isOFFP == false)]
                                            [if award.isIntroducerExceededMaxValues == true]
                                                [award.ppsPromoFlg = X]
                                            [update promoXRefId and userId]
                                            PromotionAwardingData.updatePromotionTransaction--[update the award in db]-todo
                                            PromotionAwardingImpl.updatePPSPoints-445
                                                PromotionAwardingImpl.updateQualificationBucket-789-[hierarchy done]
                                        [else]
                                            [if isPPSPending == false || (isIntroducer == true && isOFFP == true)]
                                                [if prmBonus > 0]
                                                    PromotionAwardingImpl.updatePoints-813-[hierarchy done]
                                                [if promoBonusEllite > 0]
                                                    PromotionAwardingImpl.updateEllitePoints-436
                                                        QualificationServiceImpl.updateQualificationBucket-7042-[hierarchy done]
                                                [if promotionPPSBonus > 0]
                                                    PromotionAwardingImpl.updatePPSPoints-445-[hierarchy done]
                                                [if ppsPromoFlg == null]
                                                    [set ppsPromoFlg = N]
                                                    [if prmBonus == 0 && promoBonusEllite == 0 && promoBonusPPS == 0]
                                                        [continue loop]
                                                [if ppsPromoFlg == N]
                                                    [if prmBonus == 0 && promoBonusEllite == 0 && promoBonusPPS == 0]
                                                        [continue loop]
                                                [update ppsPromoFlg and statementPrtpCd]
                                                PromotionAwardingData.createPromotionTransaction-todo
                                    [end]
                                PromotionAwardingImpl.awardNonMiles-177
                                    [receives award: PromotionAward]
                                    [if award.nonMilesAward map is not empty]
                                        [loop through the nonMilesAward map]
                                            [initialise nonMilesInd: String, nonMQty: String]
                                            [if nonMQty index of # > 0]
                                                [update map with nonMilesInd key]
                                        [loop through nonMilesAward map]
                                            [initialise nonMilesInd: String, nonMQty: String]
                                            [update map with nonMilesInd key]
                                        [update transXrefId and isMilesAward]
                                        PromotionAwardingData.createPromotionTransaction--[call creation of ZC non-air awarding]-todo
                                    [end]
                                [if awardType == null || awardType != EN || awardType != MN]
                                    PromotionAwardingData.voidAwardedRecordsInWkgTable-todo
                            [else]
                                [if dupRes == true]
                                    PromotionAwardingData.updateDuplicateAwdWkProcessFlg-todo
                        [else]
                            PromotionAwardingData.updateErrorRecordsInWkgTable-todo
                [else]
                    PromotionAwardingFacadeImpl.isPromotionAwardedToMember-315-[returns boolean]
                        PromotionAwardingData.isPromotionAwardedToMember-todo
                    PromotionAwardingFacadeImpl.isKFAlrQualifiedToTargetedTier-322-[returns boolean]
                        PromotionAwardingData.isKFAlrQualifiedToTargetedTier-todo
                    [if both statements above returns true]
                    PromotionAwardingImpl.awardQualificationPromotion-498
                        QualificationServiceImpl.forceQualifyByPromotion-106
                            QualificationServiceImpl.forceQualifyByPromotion-112
                                QualificationServiceImpl.forceQualify-138
                                    QualificationServiceImpl.valididateForceQualAccountStatus-6967-[check account status]
                                        QualificationServiceImpl.getAccountStatus-7025-[returns accountStatus]
                                            QualificationData.getAccountStatus-todo
                                        [if accountStatus == E]
                                            [throw error]
                                        [else]
                                            QualificationServiceImpl.validateAccountStatus-6967-[returns boolean]
                                                QualificationData.validateAccountStatus-todo
                                            [if the validateAccountStatus method returns false]
                                                [throw error]
                                            [end]
                                    [target tier status cannot be null or basic tier]
                                    QualificationServiceImpl.getTierStatByName-6950
                                        TierStatData.getTierStatByName--[returns tierStat obj]-todo
                                        [if tierStat obj == null]
                                            [throw error]
                                    QualificationServiceImpl.validateTierType-6918
                                        [returns false if tierType not ELITE or PPS]
                                    [decide which action to perform and who will perform]
                                    [if forceQualType == FX]
                                        [if targetTierType == ELITE]
                                            QualificationServiceImpl.processEliteCustToBeExtened-6327
                                                [if parameter request == null, throw error]
                                                QualificationServiceImpl.getEliteCustomerData-8245-[hierarchy done]
                                                [set tierStatus and qlfy ind]
                                                [set force extension date and month]
                                                [set end date]
                                                [if curEndDt is before curTierExp, throw error]
                                                [if awardTierBonus == true]
                                                    [set tierBonusEndDate = qlfyEndDate]
                                                [setTierExp = qlfyEndDate]
                                                [set tier exp in tierqual]
                                                [tier expiry in tier qual]
                                                [if runDate is after orgQlfyEndDate && runDate is before orgQlfyEndDateAfterXDays]
                                                QualificationServiceImpl.getMilesByParticipents-3896-[returns elitePrtList]
                                                    EliteParticipantData.getMilesByParticipants-todo
                                                [loop through the elitePrtList and aggregate the miles from prt obj]
                                                [set the curMileage to aggregated miles]
                                                QualificationServiceImpl.updateEliteInfo-3922-[update database]
                                                    QualificationData.updateEliteInfo-todo
                                                QualificationServiceImpl.getTierStatList-6932
                                                    TierStatData.getTierStatList-todo
                                                [if issueCard == true]
                                                    TierUtil.compareUtil--[hierarchy done, returns result]
                                                    [if result >= 0]
                                                        [requalified, need to issue new card]
                                                        QualificationServiceImpl.sendCardRequest-6522-[enter null for statusInd param]
                                                            [create and populate card obj]
                                                            [if ed not null && te not null && te is after ed]
                                                                [setCardReIssuanceExpiryDate = tierExp]
                                                            [else]
                                                                [if basic tier, no card expiry]
                                                                [else]
                                                                    [if currentTierStatus == LIFE_TIER]
                                                                        CollateralImpl.getCurrentCard--[hierarchy done]
                                                                        [if year of qlfyStartDate == year of cardExpDate]
                                                                            [prepare and set the setCardReIssuanceExpiryDate]
                                                                        [else]
                                                                            [issueCard = false]
                                                                    [else]
                                                                        [set setCardReIssuanceExpiryDate]
                                                            [if createCD == DOWNGRADE constant]
                                                                [setDownGradeSupFlg = Y]
                                                            [else]
                                                                [if tierStatus == SOLITAIRE || LIFE_TIER]
                                                                    [setIssueSupFlg = Y]
                                                            [send request for principal card]
                                                            [if issueCard == true]
                                                                CollateralImpl.requestCardReIssuance--[hierarchy done, returns result vector]
                                                            [no need to send  email for force extension and re-instate cases]
                                                [else]
                                                    [same logic as if statement, except pass in CARD_ALREADY_ISSUED constant for sendCardRequest]
                                                QualificationServiceImpl.createEventLog-8281
                                                    EventLogServiceImpl.createEventLog--[hierarchy done]
                                                [end]
                                        [else if targetTierType == PPS]
                                            QualificationServiceImpl.processPPSCustToBeExtened-5997
                                                QualificationServiceImpl.getPPSCustomerData-7474
                                                    QualificationServiceImpl.getPPSCustomerData-7750
                                                        QualificationData.vLoadVOpps-[get customer elite data]-todo
                                                    [end]
                                                [if currentTierStatus == QUALIFIED_TIER constant]
                                                    [create new PPSYearQual obj and set into customerTier obj]
                                                [increment the noOfYrs if incrementYrs == true]
                                                [if qlfyInd != SOFT_LAND_QUALIFY_IND constant]
                                                    [set qlfyInd = PPS_FORCE_EXTENSION_IND constant]
                                                [set force extension date and month]
                                                [set end date]
                                                [set tier bonus, tierExpDate]
                                                QualificationServiceImpl.getPASOnHoldDays-7005-[returns int pasOnHoldDays]
                                                    QualificationData.getPASOnHoldDays
                                                [if runDate is after orgQlfyEndDate && runDate is before orgQlfyEndDateAfterXDays]
                                                    QualificationServiceImpl.getMilesAndSectorByParticipent-2159-[returns ppsPrtList]
                                                        PPSParticipantData.getMilesAndSectorByParticipants
                                                    [loop through the ppsPrtList and aggregate the miles, sector and values from PPSParticipant obj in each iteration]
                                                    [if tierStatus == QUALIFIED_TIER constant]
                                                        QualificationServiceImpl.findEffectivePeriod-6305-[hierarchy done]
                                                            QualificationServiceImpl.getTierStatList-6281-[returns list]
                                                                TierStatData.getTierstatList
                                                            [returns yrsInTier]
                                                        QualificationServiceImpl.matchPPSYearQualRecord-6254-[returns existingRecord: PPSYearQual obj]
                                                            PPSYearQualData.matchPPSYearQualRecord
                                                        [some description that explains if no existing record in db]
                                                        [if existingRecord not null]
                                                            [recordsToSearch = effectivePeriod - 1]
                                                        [else]
                                                            [recordsToSearch = effectivePeriod - 2]
                                                QualificationServiceImpl.updatePPSInfo-2256-[update database]
                                                    QualificationData.updatePPSInfo
                                                [if cardCreateCD == null, cardCreateCD = EXTEND constant]
                                                [if issueCard == true]
                                                    QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = null]
                                                [else: QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = CARD_ALREADY_ISSUED constant]]
                                                QualificationServiceImpl.createEventLog--[hierarchy done]
                                                [if newTierStatus == QUALIFIED_TIER || LIFE_TIER || SOLITAIRE_TIER]
                                                    QualificationServiceImpl.getRefDescription-3650-[returns refValue string]
                                                        QualificationData.getRefDescription
                                                    [if refValue == Y]
                                                        VoucherInfoServiceImpl.digitalPpsIssueVchr-51
                                                            VoucherInfoServiceImpl.getDigitalVoucherDtls-666-[returns list of digitalPpsVoucherRule]
                                                                VoucherIssuanceData.getDigitalVoucherDtls
                                                            [loops through the returned digitalPpsVoucherRule list, add each digitalPpsVoucherRule into validDigitalVchrs: list]
                                                            VoucherInfoServiceImpl.issuePpsVoucher-84
                                                                [if auditId == MARMSOPS || OPS || forceTrue == true]
                                                                    [action = AUTO_ISSUANCE_IND]
                                                                [else]
                                                                    [action = MANUAL_ISSUANCE_IND]
                                                                CustomerTypeData.getCustomerTypeChangeHistory--[returns list of customerType]
                                                                [if customerType list is not empty, isSeeded = true]
                                                                CustomerServiceImpl.getCustomerParticulars--[hierarchy done, returns customerParticulars]
                                                                CustomerServiceImpl.getCustomerID--[hierarchy done]
                                                                EmailValidator.validateMailId--[hierarchy done]
                                                                [set the emailID]
                                                                [create new JsonObject for rank info]
                                                                [create new JsonObject for passengerInfo]
                                                                [loop through digitalPpsVoucherRule list]
                                                                    [loop through the vchrNo value]
                                                                        [set up new voucherObj: JsonObject, and add to voucherArray: JsonArray]
                                                                        [set up new DigitalPpsVoucherRule and add to list of dgtlVoucherRule]
                                                                [add voucherArray into passObj, and passObj into passArr]
                                                                [create JsonObject rsnForIssueObj]
                                                                [load properties file AlteaJMS.properties]
                                                                [retrieve apiKey, apiKeyValue and mavisEndpoint from properties file]
                                                                [if !isSeeded]
                                                                    LSLServiceHandler.invokeLslApiHeader-43-[returns responseStatus]
                                                                        [get KEY_STORE_PATH, KEY_STORE_PASSWORD, TRUST_STORE_PATH, TRUST_STORE_PASSWORD and KEY_PASS from properties file]
                                                                        [create keyStore obj and load the password and keystoreInput to it]
                                                                        [load the truststore, leave it null to rely on CA certs distributed with the JVM]
                                                                        [wrap request string into a StringEntity obj]
                                                                        [send http post request to mavisEndpoint]
                                                                        [end]
                                                                [else]
                                                                    VoucherIssuanceData.getErrDescFromDB
                                                                    VoucherInfoServiceImpl.createEventLog-429
                                                                        EventLogServiceImpl.createEventLog--[hierarchy done]
                                                                [if responseStatus not empty string]
                                                                    [if responseStatus == TIMEOUT_ERROR]
                                                                        [loop through the dgtlVchrRule list]
                                                                        [loop through the vchrNo]
                                                                            [create new eventLog obj]
                                                                            VoucherIssuanceData.getErrDescFromDB--[get errorDesc]
                                                                            [retVal = F]
                                                                            VoucherInfoServiceImpl.createEventLog--[hierarchy done]
                                                                    [create new JsonObject out of responseStatus]
                                                                    [if responseStatus contains voucherInfo string]
                                                                        [extract jsonArr from JsonObject]
                                                                        [loop over the jsonArr]
                                                                            [each iteration, extract digitalPpsVoucherRule obj as dgtlVchrRulle]
                                                                            [loop over dgtlVoucherRule]
                                                                                [if vchrRqNo == dgtlVchrRulle.getBchrReqNo]
                                                                                    [if statusDesc == ACCEPTED_STATUS constant]
                                                                                        [create eventLog]
                                                                                        [retVal = S]
                                                                                    [else]
                                                                                        [create eventLog for failed response]
                                                                                    [break]
                                                                    [else if responseStatus contains errorInfo string]
                                                                        [create eventLog for error response]
                                                                    [if statusCode not empty string && action != AUTO_ISSUANCE_IND constant]
                                                                        VoucherInfoServiceImpl.processErrorForDgtlVchr-625
                                                                            VoucherInfoServiceImpl.getErrorReferenceDesc-651
                                                                                PointConversionData.getErrorReferenceDesc
                                                                            [throw error]
                                                                [return retVal and end]
                                                            [end]
                                                [end]
                                    [else if forceQualType == FI]
                                        [force reinstate case]
                                        [if targetTierType == ELITE]
                                            QualificationServiceImpl.processEliteCustToBeReinstate-3676
                                                [extract intID, extendByMonth, cardCreateCD, auditID, issueCard, awardTierBonus, incrementYrs and startDt local var]
                                                QualificationServiceImpl.getTierStatList--[hierarchy done]
                                                QualificationData.getLatestEliteHistory--[returns CustomerTier from database, as hisCustTier var]
                                                QualificationServiceImpl.getEliteCustomerData-8245-[hierarchy done, returns customerTier obj as customerTier var]
                                                [set auditID, qlfyInd fields for hisCustTier var]
                                                TierUtil.compareTier-570-[return compare var]
                                                    [if first is higher than second, then return 1]
                                                    [if first is lower than second, then return -1]
                                                    [if first and second are on same hierarchy, then return 0]
                                                    [if any tierStatus cannot be determined, then return -2]
                                                [if compare > 0: hisCustTier.setCurrentTierStatus = eliteTierStatus]
                                                [else: hisCustTier.setNewTierStatus = eliteTierStatus]
                                                [set the hisCustTier, such as old expiry date, end date, tierBonus, tierQual...]
                                                QualificationServiceImpl.getMilesByParticipents--[hierarchy done, returns a list of eliteParticipant]
                                                [loop over the list of eliteParticipant]
                                                    [aggregate the miles from each iteration of eliteParticipant]
                                                [set hisCustTier fields: curMileage, eliteParticipantList, forceQualType]
                                                [if awardTierBonus && request.isStartDateDiffFromSysDate]
                                                    QualificationServiceImpl.recalcTierBonus-2702-[recalculate tier bonus on transactions between prevEliteFailedDate and current date]
                                                        QualificationServiceImpl.getCustomerID-2983
                                                            CustomerIDHandlerImpl.getCustomerID--[hierarchy done]
                                                        ValidatorImpl.getSystemDate--[hierarchy done]
                                                        QualificationServiceImpl.getAirTransForTierBonusRecalc-3024-[get the list of transaction and associated promo/tier bonus falling in date range]
                                                            AccrualDetailsData.getAirTransForTierBonusRecalc
                                                        [loop through interimTransList var returned from prev mtd call]
                                                            [get the promotion record awarding tier bonus, as tbRec var]
                                                            [calculate tier bonus to be awarded based on new tier]
                                                            [if accrualDetails.getAccrualPoints.getBillToPrt not empty string]
                                                                ValidatorImpl.getTierBonus--[hierarchy done, extract tbRefList, pass in billToPrt]
                                                            [else]
                                                                ValidatorImpl.getTierBonus--[hierarchy done, extract tbRefList, pass in accrualDetails.getPrtCd]
                                                            [if tbRefList not null]
                                                                [loop over the tbRefList]
                                                                    [extract tierBonus obj as tb]
                                                                    [if tb.getTierStatusInd == tierToAwd]
                                                                        [if tb.getTierBonusValue > 0]
                                                                            [value based bonus]
                                                                        [else if tb.tierBonusFactor > 0]
                                                                            [factor based bonus]
                                                                            [calculate the reCalcTB]
                                                                            [break]
                                                            [if tbRec not null]
                                                                [description of purpose in line 2794 to 2802]
                                                                [if tbRec.accrualPoints.tierBonus < reCalcTB]
                                                                    [reCalcTB = reCalcTB - currTB]
                                                                [else]
                                                                    reCalcTB = 0
                                                            QualificationServiceImpl.checkDupPromotion-2964-[returns boolean and returns true if promotion is duplicated]
                                                                AccrualDetailsData.checkDupPromotion
                                                            [if the prev mtd call returns true]
                                                                reCalcTB = 0
                                                            [if reCalcTB > 0]
                                                                [no tier bonus was awarded or the awarded tier bonus was lesser, so create new transactions]
                                                                [if ad.promoXrefID == null]
                                                                    AirAccrualImpl.getATTransId--[hierarchy done, get promoXrefSeq var]
                                                                    UtilServiceImpl.getTransRefId--[hierarchy done]
                                                                    QualificationServiceImpl.updateTransPromoRefID-2884
                                                                        AccrualDetailsData.updateTransPromoRefID
                                                                [generate id for TRANS_BUCKET_PTS, Promo Trans and Promo Awd map]
                                                                AirAccrualImpl.getATTransId--[hierarchy done]
                                                                UtilServiceImpl.getTransRefId--[hierarchy done]
                                                                [Build PromotionAward VO for updating PROMO_TRANS and PROMO_AWD_MAP]
                                                                QualificationServiceImpl.createPromotionAwardVO--[hierarchy contains no mtd calls, just creating promotionAward obj]
                                                                QualificationServiceImpl.createPromotionTransaction-3005
                                                                    PromotionAwardingData.createPromotionTransaction
                                                                QualificationServiceImpl.createFfpPointVO-3044-[create FfpPoints obj]
                                                                    [create ffpPoints obj and return]
                                                                PointsHandlerImpl.updateFfpPts--[hierarchy done]
                                                        [end]
                                                QualificationServiceImpl.updateEliteInfo--[hierarchy done, updates database]
                                                [if hisCustTier.currentTierStatus == G: Gold]
                                                    QualificationServiceImpl.moveEliteGoldTrkngToHis-3943
                                                        QualificationData.checkForEliteGoldTracking--[returns boolean]
                                                        [if returned boolean is true]
                                                            QualificationServiceImpl.moveRecordToHis-3967
                                                                QualificationData.moveHis
                                                [if cardCreateCD == null: cardCreateCD = RI: REINSTATE constant]
                                                [if issueCard == true]
                                                    QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = null]
                                                [else]
                                                    QualificationServiceImpl.sendCardRequest--[hierarchy done, status param = CARD_ALREADY_ISSUED constant]
                                                QualificationServiceImpl.createEventLog--[hierarchy done]
                                                [end]
                                        [else if targetTierType == PPS]
                                            QualificationServiceImpl.processPPSCustToBeReinstate-3299
                                                [if request == null, throw error]
                                                [initialise stime, intID, extendByMonth, cardCreateCD, auditID, issueCard, awardTierBonus, incrementYrs, startDt, customerTier]
                                                QualificationData.getLatestPPSHistory--[load the pps history record, returns hisCustTier var]
                                                [if hisCustTier == null, throw error]
                                                QualificationServiceImpl.getPPSCustomerData--[hierarchy done, get elite customer: customertier var]
                                                [set fields of hisCustTier, auditID and reinstateRsrvVal]
                                                [set fields of hisCustTier, newTierStatus and currentTierStatus with if condition on qualification]
                                                [special handling for QPP SL]
                                                [set fields of hisCustTier, qlfyInd, previousTierStatus, noYearsQlfd, runDate, origExp, qlfyEndDate]
                                                [if awardTierBonus == true]
                                                    [hisCustTier.tierBonusEndDate = hisCustTier.qlfyEndDate]
                                                [else: set hisCustTier.tierBonusStartDate and hisCustTier.tierBonusEndDate = null]
                                                [set customerTier.tierqual.tierExpDate = newEndDate]
                                                QualificationServiceImpl.getMilesAndSectorByParticipent-2159-[hierarchy done, returns ppsParticipantList: list of PPSParticipant]
                                                [loop through ppsParticipantList]
                                                    [aggregate the miles, sector and values from the each iteration of ppsParticipant obj]
                                                [set fields of hisCustTier: hisCurValue, curMileage, curSectCount, curValue, ppsParticipantList, forceQlfyExtendedDate, noOfExtendedMonth]
                                                [set fields of hisCustTier.tierqual]
                                                [recalculate tier bonus for interim period]
                                                [if awardTierBonus and request.isStartDateDiffFromSysDate]
                                                    QualificationServiceImpl.recalcTierBonus-2702-[hierarchy done]
                                                [set cumulative pps value]
                                                [set class variable PPSNewScheme from fld_identifier of PPS_NEW_SCHEME_SWITCH]
                                                [if PPSNewScheme == Y]
                                                    [if (hisCustTier.tierStatus == T: SOLITAIRE_TIER && customertier.tierStatus == Q: QUALIFIED_TIER && hisCustTier.interimFlg == N: QUAL_SCHEME) || (hisCustTier.tierStatus == T && customerTier.tierStatus == Q && customertier.qlfyInd == PP: PPS_PRE_QUALIFY_IND)]
                                                        [set hisCustTier fields: qualSchemeTPP, qlfyEndDateRI]
                                                        QualificationServiceImpl.fetchDebitedRsrvVal-3615
                                                            PPSReserveValData.fetchDebitedRsrvVal--[returns a list]
                                                            [loop through the list and populate fields rvForRI and qlfyExpDate]
                                                QualificationServiceImpl.updatePPSInfo-2256-[hierarchy done, update database]
                                                QualificationServiceImpl.awardHighValueTagForPPS-2276
                                                    [if request == null, throw error]
                                                    [initialise / declare CustomerTier as custTier, String as intID, String as newTierStatus, String as auditID, String as noOfYears, String minValReqForHV, CustomerTier cusTier, Date as currQlfyStartDt]
                                                    [initilise / declare long as cumPPSVal, String as tagInfoExists, int as success]
                                                    ControlParamData.getCtrlParaRef--[returns noOfYears var]
                                                    ControlParamData.getCtrlParaRef--[returns minValReqForHV var]
                                                    [if typeOfQual == PPS_REQUAL_ACTION constant || SOFT_LAND_QUALIFY_IND constant || PPS_UPGRADESL_IND constant]
                                                        [if newTierStatus == T || (Q && typeOfQual == SOFT_LAND_QUALIFY_IND)]
                                                            QualificationData.vLoadVOpps--[returns list of customerTier obj]
                                                            [extract first customerTier object from the list as custTier]
                                                            [if custTier.tierStatus == T || (custTier.tierStatus == Q && typeOfQual == SOFT_LAND_QUALIFY_IND)]
                                                                QualificationData.getPastYrsPPSVal--[returns cumPPSVal]
                                                                QualificationData.chkPrevValAndTagHVPps
                                                    [else if typeOfQual == PPS_REINSTATE_ACTION constant]
                                                        [if newTierStatus == T]
                                                            QualificationData.reinstatePrevHVTag
                                                    [end]
                                                [if issueCard]
                                                    QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = null]
                                                [else]
                                                    QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = CARD_ALREADY_ISSUED constant]
                                                QualificationServiceImpl.createEventLog--[hierarchy done]
                                                [if newTierStatus == SOLITAIRE || QUALIFIED_TIER || LIFE_TIER]
                                                    QualificationServiceImpl.getRefDescription--[hierarchy done, returns refValue var]
                                                    [if refValue == Y]
                                                        VoucherInfoServiceImpl.digitalPpsIssueVchr-51-[hierarchy done]
                                                [if intID not null]
                                                    QualificationServiceImpl.updateCusBucketPts-5842
                                                        QualificationServiceImpl.getCustomerIDfrmIntID-5888
                                                            CustomerData.getcustomerID
                                                        QualificationServiceImpl.getCtrlParaValue-5870
                                                            ControlParamData.getCtrlParaRef
                                                        [if qualAction == PPS_PREQUAL_ACTION constant && nonExpFlg == N]
                                                            ReferenceServiceImpl.getValidityPrdFromCusId-56-[hierarchy done, returns valPrd var]
                                                            [if valPrd == NON_EXPIRY_VALIDITY_PRD constant && nonExpSwitch == Y]
                                                                NonExpiryMiles.updateCusBucketPts-57
                                                                    [initialise / declare TicketSourceInfo as ticketSource, QuarterlyBucketPoints as qtrPts, CusBucketPoints as cusPts, ArrayList as cusExtPtsDtls]
                                                                    [initialise / declare tempUtilDate, Date as sqlEndDate, success, expPts, curBal]
                                                                    [initialise / declare bucketEndDt class variable to be 36 months from current date]
                                                                    NonExpiryMiles.getNonExpDate-400
                                                                        [retrieve date from dualMapper]
                                                                    [set sqlEndDate]
                                                                    [initialise totPts and List<CusBucketPts> as list]
                                                                    [if qualAction == PPS_PREQUAL_ACTION constant || PROFILE_TAGGING constant]
                                                                        CusBucketPtsMapper.getAllGivenQualActionEqualsPPSPRE--[returns a list of CusBucketPts]
                                                                    [else]
                                                                        CusBucketPtsMapper.getAllGivenQualActionNotEqualsPPSPRE--[returns a list of CusBucketPts]
                                                                    [set fields with values for ticketSource, totPts and qtrPts from the returned list above]
                                                                    NonExpiryMiles.updateCusBucket-226-[returns success int]
                                                                        CusBucketPtsMapper.updateCusBucket
                                                                    [if success == 0]
                                                                        NonExpiryMiles.insertCusBucket-171-[returns success int]
                                                                            CusBucketPtsMapper.insertCusBucket
                                                                    [if runDate is before current date]
                                                                        NonExpiryMiles.getExpiredBkts-197-[returns list of CusBucketPts]
                                                                            CusBucketPtsMapper.getExpiredBkts
                                                                    [if qualAction == PPS_PREQUAL_ACTION constant]
                                                                    CusBucketPtsMapper.getExpPts--[returns expPtsList: list<Long>]
                                                                    [if success == 1]
                                                                        [if qualAction == PPS_PREQUAL_ACTION constant || PROFILE_TAGGING constant]
                                                                            CusBucketPtsMapper.updateGivenQualActionEqualsPPSPRE
                                                                        [else]
                                                                            CusBucketPtsMapper.updateGivenQualActionNotEqualsPPSPRE
                                                                    [if qualAction == PPS_PREQUAL_ACTION]
                                                                        CusBucketPtsMapper.getExpPtsCriteriaQtrExpDt--[returns a list of long]
                                                                        [extract curBal from returned list of long]
                                                                        NonExpiryMiles.updateMileageSum-256
                                                                            MileageSumMapper.updateMileageSum2
                                                                        [if runDate is before current date]
                                                                            NonExpiryMiles.updatePtsExtnDtls-273
                                                                                [declare custTier: String]
                                                                                [initialise ref: AdminFeeReference]
                                                                                CustomerAcctData.getCustomerTier--[returns custTier string]
                                                                                AdminFeeEnquiryData.getAdminFeeReference
                                                                                [loop over the list of CusBucketPoints]
                                                                                    NonExpiryMiles.generateTxRefId-394
                                                                                        PointsExtnServiceImpl.getPointsExtnTransId-111-[returns transIDSeq]
                                                                                            PointsExtnData.getPointsExtnTransId
                                                                                        PointsExtnServiceImpl.getTransRefId--[returns transID]
                                                                                            [convert transIDSeq into transID]
                                                                                        [return transID]
                                                                                    [set PointsExpiredExtnTrans]
                                                                                    [set TransBucketPoints, cusMthPts: CusMonthlyPoints]
                                                                                    PointsExtnServiceImpl.createPointsExtnDetailTrans-148
                                                                                        PointsExtnData.createPointsExtnDetailTrans
                                                                                    PointsHandlerImpl.insertTransBucketPts--[hierarchy done]
                                                                                    PointsHandlerImpl.updateCusMthPts--[hierarchy done]
                                                                                    [set adminTrans: AdminFeeTransaction, adminFee: AdminFeeRecord]
                                                                                    ValidatorImpl.getCtrlParaObject--[hierarchy done]
                                                                                    PointsExtnServiceImpl.getParticipantAbbr-127-[returns prtAbbr: String]
                                                                                        ValidatorImpl.getParticipantAbbr--[hierarchy done]
                                                                                    AdminFeeImpl.setAdminFeePayment-42-[returns an array of AdminFeeTransaction as adTransArr, hierarchy done]
                                                                                    [set ptsExtnDetail: PointsExpiredExtnTrans]
                                                                                    PointsHandlerImpl.createPointsExtnTrans-461
                                                                                        PointsHandlerData.createPointsExtnTrans
                                                                                [return success]
                                                                    [end]
                                                        [else if qualAction == PPS_DOWNGRADE_ACTION constant]
                                                            ReferenceServiceImpl.getValidityPrdFromCusId-56-[hierarchy done, returns valPrd var]
                                                            [depending on the valPrd returned, call NonExpiryMiles.updateCusBucketPts--[hierarchy done]]
                                                        [end]
                                                [end]
                                    [else if forceQualType == FS]
                                        [force softlanding case]
                                        [if targetTierType == ELITE]
                                            QualificationServiceImpl.processSoftlandQPPToSilver-3091
                                                [receives QualRequest obj as request var]
                                                [if request == null, throw error]
                                                [declare / initialise intID: String, newTierStatus: String, runDate Date, cardCreateCD: String, auditID: String, forceQualify: boolean, awardTierBonus: boolean, issueCard: boolean]
                                                QualificationServiceImpl.getTierStatList--[hierarchy done]
                                                QualificationServiceImpl.getEliteCustomerData--[hierarchy done, load qualification data from cus_pps_qual, returns customerTier var]
                                                [Customer without single accrual will not have any qualification records]
                                                [If such member is force qualified to Elite status then following block of]
                                                [code ensure that dummy accrual of 0 miles will create necessary qualification record for such customer]
                                                [if customerTier == null && forceQualify == true]
                                                    [elite record does not exist]
                                                    QualificationServiceImpl.updateQualificationBucket-566-[returns flag]
                                                        QualificationServiceImpl.updateQualificationBucket-7042
                                                            QualificationServiceImpl.updateQualificationBucket-7061-[hierarchy done]
                                                    [if flag == true]
                                                        QualificationServiceImpl.getEliteCustomerData--[hierarchy done]
                                                    [else: throw error]
                                                    [initialise prgCD from customerTier]
                                                    [set customerTier]
                                                    [set currentTierStatus of customerTier var]
                                                    QualificationServiceImpl.reviseDatesForQPPDowngrade-3256
                                                        [receives customerTier: CustomerTier as parameter]
                                                        [initialise eliteStartDt: Date and eliteEndDt: Date]
                                                        [update customerTier fields with new values: qlfyStartDate, qlfyEndDate, qlftDate, tierExp, tierBonusStartDate, tierBonusEndDate]
                                                        [if customerTier.tierQual == null]
                                                            [initialise TierQual obj and populate the fields, before updating customerTier]
                                                            [fields of tierQual obj updated: mbrSince, prevTierStatus, yrsQlfd, firstQlfyingDate, currQlfyingDate, tierExpDate, highestTierStatus, rcreDate]
                                                        [else]
                                                            [update customerTier with different values]
                                                            [fields updated: mbrSince, firstQlfyingDate, prevTierStatus, currQlfyingDate, tierExpDate, rcreDate]
                                                    [fields updated in customerTier: qlfyInd]
                                                    [if !awardTierBonus]
                                                        [fields updated in customerTier: tierBonusStartDate, tierBonusEndDate]
                                                    [if customerTier.isIncrementYears]
                                                        [fields updated in customerTier: noYearsQlfd, tierqual.yrsQlfd]
                                                    QualificationServiceImpl.getTierMileageSummary--[hierarchy done]
                                                    QualificationServiceImpl.updateEliteInfo--[hierarchy done]
                                                    [if awardTierBonus == true && request.isStartDateDiffFromSysDate == true]
                                                        [initilise sd: Date, ed: Date]
                                                        QualificationServiceImpl.recalcTierBonus--hierarchy done
                                                    [if cardCreateCD == null: cardCreateCD = SOFTLAND constant]
                                                    [if issueCard]
                                                        TierUtil.compareTier--[hierarchy done, returns result: int]
                                                        [if result == 1]
                                                            QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = null]
                                                    [else if forceQualify == true && issueCard == false]
                                                        TierUtil.compareTier--[hierarchy done, returns result: int]
                                                        [if result == 1]
                                                            QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = CARD_ALREADY_ISSUED constant]
                                                    QualificationServiceImpl.createEventLog--[hierarchy done]
                                        [else if targetTierType == PPS]
                                            QualificationServiceImpl.processSoftlandSolitaireToQPP-2567
                                                [receives request: QualRequest as parameter]
                                                [if request == null, throw error]
                                                [initialise / declare intID: String, newTierStatus: String, runDate: Date, cardCreateCD: String]
                                                [initialise / declare auditID: String, issueCard: boolean, forceQualify: boolean, awardTierBonus: boolean]
                                                [initialise / declare customerTier: CustomerTier]
                                                QualificationServiceImpl.getPPSCustomerData--[hierarchy done]
                                                [Customer without single accrual will not have any qualification records]
                                                [If such member is force qualified to PPS status then following block of]
                                                [code ensure that dummy accrual of 0 miles will create necessary qualification]
                                                [record for such customer]
                                                [if customerTier == null && forceQualify == true]
                                                    QualificationServiceImpl.updateQualificationBucket-566-[hierarchy done, returns flag]
                                                    [if flag == true]
                                                        QualificationServiceImpl.getPPSCustomerData--[hierarchy done]
                                                    [else: throw error]
                                                [else if customerTier == null: throw error]
                                                [if cardCreateCD == null: cardCreateCD = SOFTLAND constant]
                                                [update customerTier with new values]
                                                QualificationServiceImpl.setPPSCustomerVO-4037
                                                    [receive customerTier: CustomerTier, sQtype: String, forceQualify: boolean, awardTierBonus: boolean, recalcMilesAndSectors: boolean]
                                                    [initialise i_No_yrs_qlfd: int, oldQlfyStartDt: Date, d_Qlfy_end_dt: Date, d_Tier_exp: Date, utilDate: Date, sysDate: Date]
                                                    [initialise isRunDateAfterQlfyEndDate]
                                                    [if customerTier.runDate is after qlfyEndDate]
                                                        [isRunDateAfterQlfyEndDate = true, recalcMilesAndSectors = true]
                                                    [if customerTier.currentTierStatus == Q: qualified tier]
                                                        [create new PPSYearQual obj]
                                                        [set field ppsYearQual of customerTier]
                                                    [for PP qual indication no need to create history record]
                                                    [if sQtype == PPS_PREQUAL_ACTION constant]
                                                        [set qual ind and forceQlfyDate of customerTier]
                                                        [if customerTier.cardCreateCode == RI: REINSTATE constant]
                                                            [customerTier.qlfyInd = PPS_UPGRADE_REINSTATE_IND constant]
                                                        [if not force qualify and rundate is after old qlfyEndDate, set qual start date to last PPS credited flight date + 1 day]
                                                            QualificationServiceImpl.getLastPPSCreditedFlightDate-3982-[returns lastPPSCreditedFlightDate]
                                                                AccrualData.getLastPPSCreditedFlightDate--[return date]
                                                        [else]
                                                            customerTier.qlfyStartDate = customerTier.runDate
                                                        [if customerTier.promoCardExpDt not null]
                                                            [set qlfyEndDate of customerTier to 1 month before customerTier.promoCardExpDt]
                                                        [else]
                                                            [non promotion qualification]
                                                            [if customerTier.newTierStatus == LIFE_TIER constant]
                                                                TierUtil.computePPSLifeEndDate-501-[returns endDate]
                                                                [set qlfyEndDate field of customerTier to endDate]
                                                            [else]
                                                                [set qlfyEndDate field of customerTier to first day of customerTier.qlfyStartDate + 1 year + 1 month - 1 day]
                                                        [set tierExpDate]
                                                        [initialise tierBonusEndDate = customerTuer.tierBonusEndDate]
                                                        [if tierBonusendDt is after customerTier.qlfyStartDate]
                                                            [tierBonusEndDt = customerTier.qlfyStartDate - 1 day]
                                                        [set tierBonusEndDateInHistory field of customerTier to tierBonusEndDt]
                                                        [set tier bonus date]
                                                        [set no of years qualified]
                                                        [if customerTier.tierQual == null]
                                                            [first time qualification to PPS club, need to create tier qual record]
                                                        [else]
                                                            [increment no of years qualified, update current qualification, set member since if it is null]
                                                        [calculate tier exp for tier qual]
                                                        [determine previous tier status]
                                                        [determine highest tier status]
                                                        [set cus_account status equal to new tier status]
                                                        [if recalcMilesAndSectors == true]
                                                            QualificationServiceImpl.recalMilesAndSectorByParticipent-4005
                                                                [receives customertier: CustomerTier from parameter]
                                                                QualificationServiceImpl.getMilesAndSectorByParticipent-2159-[hierarchy done, returns ppsPrtList: List]
                                                                [loop over the list]
                                                                    [aggregate the miles, sectors and values and set them in customerTier]
                                                                [end]
                                                        [else]  
                                                            [set miles / sectors / values to zero]
                                                        [if customerTier.newTierStatus == QUALIFIED_TIER constant]
                                                            [if customerTier.isReinstateCumVal == true]
                                                                QualificationServiceImpl.getLatestPPSHistory-4323-[gets latest pps history hisCusTier: CustomerTier]
                                                                    QualificationData.getLatestPPSHistory
                                                                [if hisCusTier not null]
                                                                    [hisYrsInQPP = hisCusTier.yearsInQPP]
                                                                [if customerTier.yearsInQPP < hisYrsInQPP]
                                                                    [customerTier.reinstateCumVal = true]
                                                                [else]
                                                                    [customerTier.reinstateCumVal = false]
                                                            [set cumulative pps value to recalculated current pps value]
                                                            [set years in qpp to 1]
                                                            [if customerTier.isReinstateCumVal == true]
                                                                QualificationServiceImpl.getPPSYearQualRecords-7727-[hierarchy done, returns yrQualRecords: List]
                                                                [if yrQualRecords not empty list]
                                                                    [extract cusYrRecord: PPSYearQual from yrQualRecords list]
                                                                    [set ppsYearQual and actualQlfyEndDt fields in customertier]
                                                                    QualificationServiceImpl.recalPPSValue-2141-[calculate pps value earned until reinstate]
                                                                        QualificationServiceImpl.getMilesAndSectorByParticipent--[hierarchy done, gets ppsPrtList: List]
                                                                        [accumulate the currentValues from each iteration of PPSParticipant obj from ppsPrtList]
                                                                        [return accumulated values]
                                                                    QualificationServiceImpl.findEffectivePeriod-6305-[hierarchy done, returns effectivePeriod: int]
                                                                    [if hisYrsInQPP > effectivePeriod]
                                                                        QualificationServiceImpl.calNewCumValue-6229-[pass in effectivePeriod]
                                                                            [receives customerTier: CustomerTier, recordsToSearch: int, flag: String, skipTopRecord: boolean, hisCurValue: long]
                                                                            [initialise newCumValue from customerTier.curValue]
                                                                            [if ppsYearQual not null]
                                                                                [update newCumValue]
                                                                            QualificationServiceImpl.getPPSYearQualRecords-7727-[returns result: List]
                                                                                PPSYearQualData.getPPSYearQualRecords
                                                                            [if skipTopRecord == true]
                                                                                [update newCumValue]
                                                                            [loop through result list]
                                                                                [update newCumValue]
                                                                            [return newCumValue]
                                                                    [else]
                                                                        QualificationServiceImpl.calNewCumValue-6229-[pass in hisYrsInQPP, hierarchy done]
                                                                    [customertier.setCumulativeValue(newCumValue), customertier.setYearsInQPP(hisYrsInQPP + 1)]
                                                        [else if customertier.newTierStatus == SOLITAIRE_TIER constant]
                                                            [customertier.setCumulativeValue(0), customertier.setYearsInQPP(0);]
                                                        [reset force extension date and month]
                                                    [else if sQtype == PPS_SOFTLAND_ACTION constant]
                                                        [set qual ind]
                                                        [set qualification date and start date]
                                                        [set tier exp date]
                                                        [if run date is before the award end date then the tier award bonus end date in history table should]
                                                        [one date before run date else it will be equal to award end date in current pps record.]
                                                        [set tier bonus date]
                                                        [set no of yrs qualified for online or batch process]
                                                        [if customertier.tierQual == null]
                                                            [first time qualification to pps club, need to create tier qual record]
                                                        [else]
                                                            [update current qualification]
                                                            [set member if it is null]
                                                        [calculate tier exp for tier qual]
                                                        [determine previous tier status]
                                                        [determine highest tier status]
                                                        [set cus_account status equal to new tier status]
                                                        [if recalcMilesAndSectors == true]-[set miles / sectors]
                                                            QualificationServiceImpl.recalMilesAndSectorByParticipent--[hierarchy done]
                                                        [else]
                                                            [set miles/sectors to zero]
                                                        [reset force extension date and month]
                                                    [else if sQtype == PPS_REQUAL_ACTION constant || sQtype == REQUAL_TYPE constant]
                                                        [store old qlfy ind for use later for QPP SL]
                                                        [set qual ind]
                                                        [set qualification date and start date]
                                                        [if not force qualify and rundate is after old qlfyEndDate, set new qual start date to last pps credited flight date + 1]
                                                        [(or 1st day of the 11th month if flight date is before that)]
                                                        [if not forceQualify && isRunDateAfterQlfyEndDate]
                                                            [if customertier.isQlfyWthRsrvVal]
                                                                [setting the next day of the previous qualification end date as the new qualification start date]
                                                            [else]
                                                                [setting the next day of the previous qualification end date as the new qualification start date]
                                                        [else]
                                                            set new qual start date to rundate
                                                        [if customerTier.newTierStatus == LIFE_TIER]-[set qualification end date]
                                                            [in case of upgrade to life tier during requalification will need to set the life end date]
                                                        [else]
                                                            [not LIFE_TIER]
                                                            [handle the earlier upgrade cases who were given only 12 months instead of 13 months]
                                                            [The 13 months for upgrade was given only from Nov 19th 2005 since the cut over in Jan 2004. So the qual end date is to check if is before 31 Dec 06.]
                                                            [if forceQualify || (isBEtoPRCase & !creditRenewal)]-[extension cases qualifying as normal member]
                                                                [set the Qualifcation end date from promotion card expiry date]
                                                            [else]
                                                            [handle the earlier upgrade cases who are given only 12 months instead of 13 months]
                                                        [set no of years qualified, online or batch process]
                                                        [If new qual start date is before the award end date then the tier award bonus end date in history table should]
                                                        [one day before qual start date else it will be equal to award end date in current pps record]
                                                        [if awardTierBonus]
                                                            [set tierBonus startDate and endDate]
                                                        [else]
                                                            [set tier bonus startDate and endDate to null]
                                                        [set cs=us tier qual no of years qualified and current qualification date]
                                                        [set tier expiry date]
                                                        [determine previous tier status]
                                                        [determine highest tier status]
                                                        [set cus_account status equal to new tier status]
                                                        [changed the actual qual end date to the new qual start date - 1 for the 11th month and 12th month qual]
                                                        [set miles/sectors/values]
                                                        [reset force extension date and month]
                                                        [if customertier.newTierStatus == QUALIFIED_TIER constant]
                                                            [if oldQlfyInd != SOFT_LAND_QUALIFY_IND constant]
                                                                [logic for tracking pps values for requalified qpp, visit the code from line 4858 to 4950]
                                                    [else if sQtype == PPS_FORCE_REQUAL_ACTION constant]
                                                        [store old qlfy ind for use below (for QPP SL)]
                                                        [set qual ind]
                                                        [set qualification date, start date, Setting the next day of the previous qualification end date as the new qualification start date]
                                                        [set qualification end date]
                                                        [if new qual start date is before the award end date then the tier award bonus end date in history table should]
                                                        [one day before qual start date else it will be equal to award end date in current pps record.]
                                                        [if awardTierBonus == true]
                                                            [set tierBonus StartDate and endDate]
                                                        [else]
                                                            [set tierbonus startDate and endDate to null]
                                                        [set customertier qual no of years qualified and current qualification date]
                                                        [set tier expiry date]
                                                        [determine previous tier status, highest tier status]
                                                        [set cus account status equal to new tier status]
                                                        [changed the actual qual end date to the new qual start date - 1]
                                                        [for the 11th month and 12th month qual - batch date is before prev qual end date]
                                                        [if recalcMilesAndSectors]-[set miles/sectors/values]
                                                            QualificationServiceImpl.recalMilesAndSectorByParticipent--[hierarchy done]
                                                        [else]
                                                            [set miles/sectors/values to 0]
                                                        [reset force extension date and month]
                                                        [logic for tracking pps values for requalified QPP- see line 5094 to 5136]
                                                        [to increment the no of years qualified for BE]
                                                        [issue card]
                                                    [end]
                                                QualificationServiceImpl.updatePPSInfo--[hierarchy done]
                                                [if awardTierBonus && request.isStartDateDiffFromSysDate]
                                                    [initialise sd: Date, ed: Date]
                                                    QualificationServiceImpl.recalcTierBonus--[hierarchy done]
                                                [if issueCard == true]
                                                    QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = null]
                                                [else if forceQualify && issueCard == false]
                                                    QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = CARD_ALREADY_ISSUED constant]
                                                QualificationServiceImpl.createEventLog--[hierarchy done]
                                                [end]
                                    [else if forceQualType == FD]
                                        [force downgrade]
                                        QualificationServiceImpl.processDowngradeSolitaireToQPP-2396
                                            [receives request: QualRequest from parameters]
                                            [if request == null, throw error]
                                            [initilise / declare intID: String, newTierStatus: String, runDate: Date, cardCreateCD: String]
                                            [initialise / declare auditID: String, issueCard: boolean, forceQualify: boolean]
                                            [initialise mths: int, customerTier: CustomerTier]
                                            QualificationServiceImpl.getPPSCustomerData--[hierarchy done, returns customerTier: CustomerTier]
                                            TierUtil.computeMonthDiff-815-[returns mthdiff, return the difference between date one - date two in terms of no of months]
                                            [if mthdiff > mths: throw error]
                                            [else]
                                                [update customerTier fields with new values]
                                                [initialise tppQualEndDate: Date]
                                                QualificationServiceImpl.getMilesAndSectorByParticipent--[hierarchy done, returns ppsParticipantList: List<PPSParticipant>]
                                                [initialise currentQualEndDate: Date, totalPPSinTPPQual: long]
                                                [update tierQual obj in customerTier]
                                                [loop through ppsParticipantList]
                                                    [aggregate the currentValues field in each iteration into totalPPSinTPPQual]
                                                [update customerTier fields with new values]
                                                QualificationServiceImpl.updatePPSInfo-2256-[hierarchy done]
                                                QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = null]
                                                QualificationServiceImpl.createEventLog--[hierarchy done]
                                                [initialise pps_Rsrv_Val from db]
                                                [create PPSReserveVal object]
                                                PPSReserveValData.updatePPSReserveValRecord--[update database, returns success: int]
                                                [if success == 0]
                                                    PPSReserveValData.insertPPSReserveValRecord--[insert into database]
                                            QualificationServiceImpl.insertintoDowngradeTrkr-2549
                                                QualificationData.insertintoDowngradeTrkr
                                            [end]
                                    [else if forceQualType == ER]
                                        [enable qpp tracking case]
                                        QualificationServiceImpl.processEnableQPPTracking-2364
                                            [receives request: QualRequest as parameter]
                                            [if request == null: throw error]
                                            [initilise intID: int, runDate: Date, auditID: String, newTierStatus: String]
                                            QualificationData.deleteFromDowngradeTrkr
                                            QualificationData.updateQlfyInd
                                            [end]
                                    [else]
                                        [if targetTierType == ELITE]
                                            QualificationServiceImpl.getEliteCustomerData-8250-[returns customerTier obj, hierarchy done]
                                            [if customerTier.qlfyInd == EP]
                                                TierUtil.compareUtil-570-[returns result]
                                                    [compare first tier status hierarchy with that of second tier status]
                                                    [if first is higher in hierarchy than second then return 1]
                                                    [if first is lower in hierarchy than second, then return -1]
                                                    [if first and second are on same hierarchy then return 0]
                                                    [if any of the tier status hierarchy cannot be determined, return -2]
                                                [if result == 0]
                                                    [set cardCreateCD = RQ: requalify]
                                                    QualificationServiceImpl.processEliteCustToBeRequalified-1171
                                                        [receives request: QualRequest from parameters]
                                                        [if request == null, throw error]
                                                        [initialise intID: String, newTierStatus: String, runDate: Date, cardCreateCD: String]
                                                        [initialise auditID: String, forceQualify: boolean, issueCard: boolean, awardTierBonus: boolean, customerTier: CustomerTier]
                                                        QualificationServiceImpl.getTierstatList--[hierarchy done]
                                                        QualificationServiceImpl.getEliteCustomerData--[hierarchy done]
                                                        [Customer without single accrual will not have any qualification record]
                                                        [If such member is force qualified to ELITE status then following block of]
                                                        [code ensure that dummy accrual of 0 miles will create necessary qualification]
                                                        [record for such customer]
                                                        [if customerTier == null && forceQualify]
                                                            QualificationServiceImpl.updateQualificationBucket--[hierarchy done, returns flag]
                                                            [if flag == true]
                                                                QualificationServiceImpl.getEliteCustomerData--[hierarchy done]
                                                            [else: throw error]
                                                        [update customerTier with new values]
                                                        [if cardCreateCD == STAR_WELCOME constant]
                                                            [update qlfyEndDate and cardCreateCode fields]
                                                        QualificationServiceImpl.setEliteCustomerVO-1341
                                                            QualificationServiceImpl.setEliteCustomerVO-605
                                                                [receive customertier: CustomerTier, sQtype: String, forceQualify: boolean, awardTierBonus: boolean]
                                                                [initialise i_No_yrs_qlfd: int, oldTierBonusEndDate: Date, isRunDateAfterQlfyEndDate: boolean]
                                                                [if run date after qlfy end date]
                                                                    [isRunDateAfterQlfyEndDate = true]
                                                                [initialise cur_year1: int, cur_year2: int]
                                                                [if sQtype == ELITE_PREQUALIFY_ACTION constant]
                                                                    [initialise qlfyInd from customertier]
                                                                    [set qlfy ind]
                                                                    [initialise and set prevTierStatus: upgrade tier status]
                                                                    [adjust no of years qualified line 668 - line 711]
                                                                    [adjust elite start date: line 716 - 737]
                                                                    [set the qualify end date and tier expiry date as card expiry date - 1 for promotion only]
                                                                    [set force qualification date]
                                                                    [set tier bonus dates]
                                                                    [create tierQual record if not present, else update record]
                                                                    [set tier expiry in tierQual]
                                                                    [set previous tier status]
                                                                    [if cus account status is lower in hierarchy than new status, need to update cus account tier status]
                                                                [else if sQtype == ELITE_REQUALIFY_ACTION constant]
                                                                    [if customertier.newTierStatus == F]
                                                                        QualificationServiceImpl.setcustomerSecondYear-1121
                                                                            [receives customertier: CustomerTier, awardTierBonus: boolean]
                                                                            [set qlfyEndDate]
                                                                            TierUtil.getEliteStartDateOnSecondYearRequal--[returns startDate]
                                                                                [return start date to be one year before tierExp date]
                                                                            [award end date in current elite record]
                                                                            [set tierBonusEndDateInHistory, qlfyStartDate, curMileage, noYearsQlfd, tier bonus dates]
                                                                            [set disctryTierFlg, tierQual]
                                                                            [end]
                                                                        [set qlfy ind]
                                                                    [else]
                                                                        [all other requalification cases]
                                                                        [set qlfy ind]
                                                                        [adjust qual start date]
                                                                        [set the qualification end date and tier expiry date as card expiry date -1 for promotion only]
                                                                        [set increment years qualified and set force qlfy date]
                                                                        [set tier bonus dates]
                                                                        [reset miles, increment years qualified]
                                                                        [set tier exp in tierqual]
                                                                [else if sQtype == ELITE_DOWNGRADE_ACTION]
                                                                    [if isRunDateAfterQlfyEndDate]
                                                                        [set run date to be qlfy end date + 1 month]
                                                                    [set qlfy start date and qlfy end date]
                                                                    [if customertier.newTierStatus == BASIC_TIER constant]
                                                                        [downgrade to basic, set fields to null or 0]
                                                                    [else]
                                                                        [set the qlfy date, tier exp date and no yrs qlfd]
                                                                        [if awardTierBonus == true]
                                                                            [set the tier bonus start date and end date]
                                                                        [set the tier qual remaining fields if basic tier or not]
                                                                [else if ELITE_RETRO_QUALIFY_ACTION constant]
                                                                    [set the qlfy ind]
                                                                    [upgrade tier status]
                                                                    [set no of years qualified, start date, end date, qualification date and tier bonus dates]
                                                                    [if tier qual is null]
                                                                        [create tierQual record]
                                                                    [else]
                                                                        [update tierQual record]
                                                                    [set tier expiry, previous tier status in tier qual]
                                                                    [If cus_account status is lower in hierarchy than new status the need to update cus_account tier status]
                                                                [end]
                                                        QualificationServiceImpl.updateEliteInfo--[hierarchy done]
                                                        [if customerTier.newTierStatus != GOLD_TIER constant]
                                                            QualificationServiceImpl.processEliteGoldTracking-1347
                                                                [receives parameters customertier: CustomerTier, auditID: String]
                                                                [initialise QlfyGStartDate: Date, QlfyGEndDate: Date]
                                                                [update customertier fields: QlfyGStartDate, QlfyGEndDate]
                                                                QualificationServiceImpl.calculateEliteMiles-1378
                                                                    [receives customertier: CustomerTier]
                                                                    QualificationServiceImpl.getMilesByParticipents--[hierarchy done, returns eliteList: List]
                                                                    [loop through the eliteList]
                                                                        [aggregate the currentMiles from each iteration]
                                                                    [returns the aggregated eliteMiles]
                                                                QualificationData.iUpdateEliteGoldTrack
                                                                [end]
                                                        [else if customerTier.newTierStatus == GOLD_TIER constant]
                                                            QualificationServiceImpl.moveEliteGoldTrkngToHis-3943-[hierarchy done]
                                                        [if cardCreateCD == null: cardCreateCD = REQUALIFY constant]
                                                        [if issueCard == true]
                                                            TierUtil.compareTier--[hierarchy done, returns result: int]
                                                            [if result >= 0]
                                                                QualificationServiceImpl.sendCardRequest--[hierarchy done, statusInd param = null]
                                                        [else if forceQualify == true && issueCard == false]
                                                            TierUtil.compareTier--[hierarchy done, returns result: int]
                                                            [if result >= 0]
                                                                QualificationServiceImpl.sendCardRequest--[hierarchy done]
                                                        [if forceQualify == true]
                                                            QualificationServiceImpl.createEventLog--[hierarchy done]
                                                        [else]
                                                            QualificationServiceImpl.createEventLog--[hierarchy done]
                                                [else if result > 0]
                                                    [set cardCreateCD = UP: upgrade]
                                                    QualificationServiceImpl.processEliteCustToBeQualified-328
                                                        [receives request: QualRequest from parameter]
                                                        [if request == null: throw error]
                                                        [initialise intID: String, newTierStatus: String, runDate: Date, cardCreateCD: String, auditID: String]
                                                        [initialise forceQualify: boolean, awardTierBonus: boolean, issueCard: boolean, customertier: CustomerTier]
                                                        QualificationServiceImpl.getTierStatList--[hierarchy done]
                                                        QualificationServiceImpl.getEliteCustomerData-8245-[hierarchy done, returns customertier]
                                                        [if customertier == null && forceQualify]
                                                            QualificationServiceImpl.updateQualificationBucket-566-[hierarchy done, returns flag]
                                                            [if flag == true]
                                                                QualificationServiceImpl.getEliteCustomerData-8245-[hierarchy done]
                                                            [else: throw error]
                                                        [else if customertier == null: throw error]
                                                        [update customertier fields with new values]
                                                        [if request.tierActionInd == ELITE_SILENT_IND constant]
                                                            QualificationServiceImpl.getLatestEliteHistory-540-[returns histCusTier: CustomerTier]
                                                                QualificationData.getLatestEliteHistory
                                                            [if histCusTier not null]
                                                                [update qlfyStartDate and qlfyEndDate fields of customertier]
                                                        [if runDate is after qualification end date]
                                                            [isRunDateAfterQlfyEndDate = true]
                                                        [if cardCreateCD == STAR_WELCOME constant]
                                                            [update qlfyEndDate and cardCreateCode fields of customertier]
                                                        QualificationServiceImpl.setEliteCustomerVO-605-[hierarchy done]
                                                        QualificationServiceImpl.updateEliteInfo-3922-[hierarchy done]
                                                        [if awardTierBonus && request.isStartDateDiffFromSysDate]-[required if rundate is after old qualification end date]
                                                            [initialise sd: Date, ed: Date]
                                                            QualificationServiceImpl.recalcTierBonus-2702-[hierarchy done]
                                                        [if forceQualify == false && isRunDateAfterQlfyEndDate == true && customertier.tierBonusStartDate != null && customertier.tierBonusEndDate != null]
                                                            QualificationServiceImpl.recalcTierBonus-2702-[hierarchy done]
                                                        [if customertier.newTierStatus != GOLD_TIER constant]
                                                            QualificationServiceImpl.processEliteGoldTracking-1347-[hierarchy done]
                                                        [else]
                                                            QualificationServiceImpl.moveEliteGoldTrkngToHis-3943-[hierarchy done]
                                                        [if cardCreateCD == null: cardCreateCD = UPGRADE constant]
                                                        [if issueCard]
                                                            TierUtil.compareTier--[hierarchy done, returns result: int]
                                                            [if result == 1]
                                                                QualificationServiceImpl.sendCardRequest--[statusInd param = null, hierarchy done]
                                                        [else if forceQualify == true & issueCard == false]
                                                            TierUtil.compareTier--[hierarchy done, returns result: int]
                                                            [if result == 1]
                                                                QualificationServiceImpl.sendCardRequest--[statusInd param = CARD_ALREADY_ISSUED constant, hierarchy done]
                                                        QualificationServiceImpl.createEventLog--[hierarchy done]
                                                        [end]
                                                [else throw error]
                                            [else]
                                                [non elite to elite tier]
                                                [set cardCreateCD = UP: upgrade]
                                                QualificationServiceImpl.processEliteCustToBeQualified-328-[hierarchy done]
                                        [else if targetTierType == PPS]
                                            QualificationServiceImpl.getPPSCustomerData-7750-[returns CustomerTier obj]
                                                QualificationData.vLoadVOpps
                                            [if customerTier.getQlfyInd != PP: pps_pre_qualify_ind]
                                                TierUtil.compareUtil-570-[returns result, hierarchy has no db connections]
                                                [if result == 0]
                                                    [set cardCreateCD = RQ: requalify]
                                                    QualificationServiceImpl.processPPSCustToBeRequalified-1397
                                                        [receives request: QualRequest]
                                                        [throw error if request == null]
                                                        [initialise intID: String, newTierStatus: String, runDate: Date, cardCreateCD: String, auditID: String]
                                                        [initialise forceQualify: boolean, requalWithRsrvVal: boolean, issueCard: boolean, awardTierBonus: boolean, creditRenewal: boolean, forceQualType: String]
                                                        [initialise customertier: CustomerTier]
                                                        QualificationServiceImpl.getPPSCustomerData-7474-[load customerTier from db, hierarchy done]
                                                        [if customertier == null && forceQualify]
                                                            QualificationServiceImpl.updateQualificationBucket-566-[returns flag, hierarchy done]
                                                            [if flag == true]
                                                                QualificationServiceImpl.getPPSCustomerData--[hierarchy done]
                                                            [else: throw error]
                                                        [else if customertier == null]
                                                            [throw error]
                                                        [if runDate is before qlfyEndDate]
                                                            [isRunDateBeforeQlfyEndDate = true]
                                                        [initialise qlfyInd]
                                                        [set auditID, runDate, qlfyWithRsrvVal, reinstateRsrvVal, ppsValReqForRequal, onlineForceQualify, qlfyWithRules, valReqFromRsrvVal, interimTPP fields of customertier]
                                                        [if creditRenewal == true]
                                                            PPSBankServiceData.getNextCredit--[get a QK credit for this member, returns credit: PPSCredit]
                                                            [if this is last credit and QLFY_IND = EK, change the status to F and pick the next credit]
                                                                PPSBankServiceData.getNextCredit--[returns credit]
                                                            PPSBankServiceData.getLastDetail--[get any existing credit detail]
                                                            [create and save a PPSCreditDetail obj]
                                                            PPSBankServiceData.createCreditDetail--[returns newDetail]
                                                            [set creditStatus]
                                                            PPSBankServiceData.update
                                                            [set isStartDateDiffFromSysDate = true]
                                                            [update issueCard, awardTierBonus, newTierStatus]
                                                        [else]
                                                            [if forceQualify == false]
                                                                QualificationServiceImpl.retractEKCredit-1926
                                                                    [receives customerTier: CustomerTier]
                                                                    [initialise intID: String, prgCD: String, rundate: Date, qualEndDt: Date]
                                                                    [if qlfyInd != PPSCredit.EXTENSION_TYPE || qualEndDt is before rundate]
                                                                        [if qlfyInd == PPSCredit.EXTENSION_TYPE && rundate == first day of month]
                                                                            PPSBankServiceData.getNextCredit--[returns credit: PPSCredit]
                                                                            [set creditStatus to STATUS_USED_UP]
                                                                            PPSBankServiceData.update--
                                                                    PPSBankServiceData.getNextCredit--[returns lastCredit: PPSCredit, get PPSCredit with status with L or U]
                                                                    PPSBankServiceData.getLastDetail--[get last detail]
                                                                    [initialise monthExtended: int, monthRetracted: intm retracted: PPSCreditDetail, sumMonthBal: int]
                                                                    [update retracted var]
                                                                    PPSBankServiceData.createCreditDetail--
                                                                    [end]
                                                        [update cardCreateCD to requalify if null]
                                                        [set promotion card expiry date, incrementYears]
                                                        [set incrementYrsInQpp]
                                                        QualificationServiceImpl.setPPSCustomerVO-4037-[hierarchy done]
                                                        [if !forceQualify && !requalWithRsrvVal]
                                                            [if (currentTierStatus == SOLITAIRE && newTierStatus == SOLITAIRE) || (currentTierStatus == QUALIFIED_TIER && newTierStatus == QUALIFIED_TIER)]
                                                                [if origQlfyEndUtilDt is before rsrvValCutOverDt]
                                                                    QualificationServiceImpl.calculateReserveVal-1830
                                                                        [receives runDate: Date, curPPSVal: long, origQlfyStartDt: Date, origQlfyEndDt: Date, customerTier: CustomerTier, type: String]
                                                                        [initialise intId: long, PPSNewScheme: String]
                                                                        [if PPSNewScheme == Y && interimFlg == N && currentTierStatus == SOLITAIRE]
                                                                            [fieldIdentifier = TPPS_VAL_TO_CALC_RSRV_VAL]
                                                                        [else]
                                                                            [fieldIdentifier = VAL_TO_TRACK_RSRV_VAL]
                                                                        [get ppsReserveValStr: String from ControlParamData.getCtrlParaRef]
                                                                        [if PPSNewScheme == Y && interimFlg == N && currentTierStatus == SOLITAIRE]
                                                                            [fieldIdentifier = "TPP_RSRV_VAL_VALIDITY_PRD"]
                                                                        [else if currentTierStatus == SOLITAIRE: fieldIdentifier = "RSRV_VAL_VALIDITY_PRD"]
                                                                        [else if currentTierStatus == QUALIFIED_TIER: fieldIdentifier = "QPP_RSRV_VAL_VALIDITY_PRD"]
                                                                        [initialise ppsReserveValPrdStr: String from ControlParamData.getCtrlParaRef]
                                                                        [initialise ppsReserveValPrd from ppsReserveValPrdStr]
                                                                        [initialise reserveVal]
                                                                        [initialise reserveValToSet = curPPSVal - reserveVal]
                                                                        [if ppsReserveValPrd > 0 && reserveVal > 0 && ((reserveValToSet >= 0 && type != FORCEREQUALFY) || (reserveValToSet > 0 && type == FORCEREQUALFY))]
                                                                            [create ppsReserveVal: PPSReserveVal]
                                                                            [create transRsrvVal: TransReserveVal]
                                                                            [update customerTier]
                                                                            [end]
                                                                [else if origQlfyEndUtilDt equal or after rsrvValCutOverDt]
                                                                    QualificationServiceImpl.calculateReserveValNew-1986
                                                                        [receives runDate: Date, curPPSVal: long, origQlfyStartDt: Date, origQlfyEndDt: Date, customerTier: customerTier, type: String]
                                                                        QualificationServiceImpl.getReferenceCode-6905-[returns hmCtrlPara: HashMap]
                                                                            ControlParamData.getEmailDetailsFromCtrlPara--[returns hashmap]
                                                                            [returns hashmap]
                                                                        [initialise pps_SwitchValue: string value from key PPS_NEW_SCHEME_SWITCH]
                                                                        [if pps_SwitchValue not null && interimFlg == QUAL_SCHEME_PPS_NEW && currentTierStatus == SOLITAIRE && PPS_NEW_SCHEME_SWITCH_ENABLED == pps_SwitchValue]
                                                                            [fieldIdentifier = "TPPS_VAL_TO_CALC_RSRV_VAL"]
                                                                        [else: fieldIdentifier = "VAL_TO_TRACK_RSRV_VAL"]
                                                                        [initialise TransReserveVal and PPSReserveVal and update customertier]
                                                                        [end]
                                                        [if forceQualType == FORCE_PROMOTION_KEY && forceQualify == true && !requalWithRsrvVal && (currentTierStatus == SOLITAIRE && newTierStatus == SOLITAIRE) || (currentTierStatus == QUALIFIED_TIER && newTierStatus == QUALIFIED_TIER)]
                                                            [setForceQualType]
                                                            [if request.ppsValReqForRequal == 0]
                                                                QualificationData.getPPSRequalSolitaireRules--[returns rules: List]
                                                                [loop through rules]
                                                                    [get rule: Tierstat obj from each iteration]
                                                                    [retrieve applQualIndList: List from Tierstat obj]
                                                                    [if ruleInd == PPS_VALUE_RULE]
                                                                        [set ppsValReqForRequal to curValToQlfy]
                                                                        [set retVal to true]
                                                            [if origQlfyEndUtilDt is before rsrvValCutOverDt]
                                                                QualificationServiceImpl.calculateReserveVal-1830-[hierarchy done]
                                                            [else if origQlfyEndUtilDt is equal of after rsrvValCutOverDt]
                                                                QualificationServiceImpl.calculateReserveValNew-1986-[hierarchy done]
                                                        [if !forceQualify && requalWithRsrvVal]
                                                            [if (currentTierStatus == SOLITAIRE && newTierStatus == SOLITAIRE) || (currentTierStatus == QUALIFIED_TIER && newTierStatus == QUALIFIED_TIER)]
                                                                [if origQlfyEndUtilDt is equal or after rsrvValCutOverDt]
                                                                    QualificationServiceImpl.calculateReserveValNew-1986-[hierarchy done]
                                                        [if isRunDateBeforeQlfyEndDate && forceQualify]
                                                            [set newEndDate]
                                                            QualificationServiceImpl.recalPPSValue-2141-[hierarchy done, returns backDatePPSValue: long]
                                                            [set curValue]
                                                            QualificationServiceImpl.getLatestPPSHistory-2183-[hierarchy done]
                                                            [initialise histcusppsStrtDate: Date, histcusppsEndDate: Date]
                                                            [if runDate is after histcusppsStrtDate && runDate is before histcusppsEndDate && consecutiveYrrsInPPS != 1]
                                                                QualificationServiceImpl.processUpdateRsrvVal-2209
                                                                    PPSReserveValData.getLatestValfromRsrvval--[returns rsrvvaltoDeduct: long]
                                                                    [initialise newRsrvvaltoDeduct]
                                                                    PPSReserveValData.updateRsrvValwithQlfystrtdt--
                                                                    QualificationServiceImpl.processAdjustTransRsrvVal-2237
                                                                        PPSReserveValData.adjustTransRsrvVal--
                                                                    [end]
                                                        QualificationServiceImpl.updatePPSInfo-2256-[hierarchy done]
                                                        QualificationServiceImpl.awardHighValueTagForPPS-2276-[hierarchy done]
                                                        [issue card logic]
                                                        [if (!isQlfyWthRsrvVal && (newTierStatus == QUALIFIED_TIER || newTierStatus == SOLITAIRE)) || newTierStatus == LIFE_TIER]
                                                            VoucherInfoServiceImpl.digitalPpsIssueVchr-51-[hierarchy done]
                                                        [create event log]
                                                        [end]
                                                [else if result > 0]
                                                    [set cardCreateCD = UP: upgrade]
                                                    QualificationServiceImpl.processPPSCustToBeQualified-5184
                                                        [receives request: QualRequest from parameter]
                                                        [initialise ppscurval]
                                                        [throw error if request is null]
                                                        [initialise local variables]
                                                        [if recalPostReserveVal]
                                                            [recalReserveVal = recalPostReserveVal]
                                                        QualificationServiceImpl.getPPSCustomerData-7474-[hierarchy done, returns customertier]
                                                        [if customertier not null && customertier.interimFlg != QUAL_SCHEME_PPS_NEW constant]
                                                            [set oldScheme to true]
                                                        [set interim flg]
                                                        [if rundate is before qlfy end date]
                                                            [isRunDateBeforeQlfyEndDate = true]
                                                        [if customertier == null && forceQualify == true]
                                                            QualificationServiceImpl.updateQualificationBucket-566-[hierarchy done, returns flag: boolean]
                                                            [if flag == true]
                                                                QualificationServiceImpl.getPPSCustomerData-7474-[hierarchy done, returns and override customertier]
                                                            [else: throw error]
                                                        [else if customertier == null: throw error]
                                                        [get ppscurval from customertier.curValue]
                                                        [update reinstateCumVal, reinstateRsrvVal, recalReserveVal]
                                                        [set cardCreateCD = UPGRADE constant if null]
                                                        [update auditID, runDate, newTierStatus, cardCreateCode]
                                                        [set promotion card expiry date, increment years]
                                                        [if rundate is after qlfyEndDate]
                                                            [isRunDateAfterQlfyEndDate = true]
                                                        [set interimTpp]
                                                        QualificationServiceImpl.setPPSCustomerVO-4037-[hierarchy done]
                                                        [if ppsNewSchemeSwitch == Y]
                                                            [if forceQualify == false]
                                                                ControlParamData.getCtrlParaRef--[hierarchy done, returns switchValue]
                                                                [if switchValue == Y && ((tierTemp == SILVER_TIER constant && newTierStatus == QUALIFIED_TIER constant) || (tierTemp == GOLD_TIER && newTierStatus == QUALIFIED_TIER) || (tierTemp == BASIC_TIER && newTierStatus == QUALIFIED_TIER))]
                                                                    QualificationServiceImpl.computePPSRsrvVal-5754
                                                                        [initialise ppsReserveVal: PPSReserveVal and transRsrvVal: TransRsrvVal]
                                                                        [set ppsReserveVal and transRsrvVal fields of customertier]
                                                        [if ppsNewSchemeSwitch == Y]
                                                            [if forceQualify == true]
                                                                [if isRunDateBeforeQlfyEndDate == true]
                                                                    [create newEndDate from runDate + 1 month (end of month)]
                                                                    QualificationServiceImpl.recalPPSValue-2141-[hierarchy done, retrurns backDatePPSValue: long]
                                                                [if recalReserveVal == true]
                                                                    ControlParamData.getCtrlParaRef--[returns ppsValTpp: String]
                                                                    [if ppsValTpp is not empty string]
                                                                        QualificationServiceImpl.getValidRsrvVal-5661-[returns curReserveVal: long]
                                                                            PPSReserveValData.getTotalReserveVal
                                                                        QualificationServiceImpl.getReserveValList-5694-[returns rsrvList: HashMap]
                                                                            PPSReserveValData.getPPSReserveValRecords
                                                                        [extract listRsrvValues and listRsrvValuesTrans from rsrvList]
                                                                        [if curReserveVal >= curValTpp]
                                                                            [loop over listRsrvValues]
                                                                                [for every iteration, add ppsReserveVal.totalReserveVal value to value variable]
                                                                                [if value < curValTpp]
                                                                                    [update ppsReserveVal and transReserveVal fields of customertier]
                                                                                    QualificationServiceImpl.debitReserveVal-5977
                                                                                        PPSReserveValData.debitReserveVal
                                                                                [else if value >= curValTpp]
                                                                                    [update ppsReserveVal and transReserveVal fields of customertier]
                                                                                    QualificationServiceImpl.debitReserveVal-5977-[hierarchy done]
                                                                                    [break]
                                                                            [if isRunDateBeforeQlfyEndDate == true && ppscurval > 0]
                                                                                QualificationServiceImpl.updatePPSValue-5907
                                                                                    [initialise tppReserveValPrd and valtoRequal from ControlParamData.getCtrlParaRef]
                                                                                    [initialise expDate from customertier.qlfyStartDate + (tppReserveValPrd: int) no of months]
                                                                                    [create and set new ppsReserveVal: PPSReserveVal]
                                                                                    [set actualQlfyEndDt field of ppsReserveVal]
                                                                                    [set ppsReserveVal and transReserveVal field of customertier]
                                                                            [else if ppscurval > 0]
                                                                                QualificationServiceImpl.updatePPSValue-5907-[hierarchy done]
                                                                            [else]
                                                                                [set transReserveVal and ppsReserveVal fields to null]
                                                                        [else if curReserveVal < curValTpp]
                                                                            [sum = curReserveVal + ppscurval]
                                                                            [if sum >= curValTpp]
                                                                                [loop over listRsrvValues]
                                                                                    [update ppsReserveVal and transReserveVal fields of customertier]
                                                                                    QualificationServiceImpl.debitReserveVal-5977-[hierarchy done]
                                                                                [initialise bal = sum - curValTpp]
                                                                                [if isRunDateBeforeQlfyEndDate == true]
                                                                                    [initialise backDatedBal = bal - backDatePPSValue]
                                                                                    [if backDatedBal > 0]
                                                                                        QualificationServiceImpl.updatePPSValue-5907-[hierarchy done]
                                                                                [else]
                                                                                    [set recalReserveVal and curValue fields to false and 0 respectively]
                                                                                    QualificationServiceImpl.invalidatePPSReserveVal-5709
                                                                                        PPSReserveValData.invalidatePPSReserveVal
                                                                [if isRunDateBeforeQlfyEndDate]
                                                                    [set curValue field to backDatePPSValue]
                                                                [if newTierStatus == SOLITAIRE_TIER && tierTemp == QUALIFIED_TIER && customertier.isReinstateRsrvVal == false && customertier.recalReserveVal == false]
                                                                    [set customertier invalidate field = true]
                                                        QualificationServiceImpl.updatePPSInfo-2256-[hierarchy done]
                                                        [if customertier.isInterimTPP == true]
                                                            ControlParamData.getCtrlParaRef--[returns ppsValTpp: String]
                                                            [if ppsValTpp not an empty string]
                                                                [convert ppsValTpp to curValTpp: long]
                                                                [if ppscurval > curValTpp]
                                                                    [create ppsReserveVal: PPSReserveVal obj]
                                                                    [initialise tppReserveValPrd from ControlParamData.getCtrlParaRef]
                                                                    [update ppsReserveVal and create transRsrvVal fields]
                                                                    [set ppsReserveVal and transReserveVal fields of customertier]
                                                                    PPSReserveValData.insertPPSReserveValRecord
                                                        [if awardTierBonus == true && request.isStartDateDiffFromSysDate == true]
                                                            [initialise sd: Date, ed: Date from customertier.runDate and current date respectively]
                                                            QualificationServiceImpl.recalcTierBonus-2702-[hierarchy done, recalculate tier bonus on transactions between sd and ed]
                                                        [recalculation of tier bonus is required if rundate is after old qualification end date]
                                                        [card issuance]
                                                        [create event log]
                                                        [if intID not null]
                                                            QualificationServiceImpl.updateCusBucketPts-5842-[hierarchy done]
                                                        [if customertier.newTierStatus == QUALIFIED_TIER || customertier.newTierStatus == SOLITAIRE_TIER || customertier.newTierStatus == LIFE_TIER]
                                                            QualificationServiceImpl.getRefDescription-3650-[hierarchy done, returns refValue: String]
                                                            [if refValue not empty string]
                                                                VoucherInfoServiceImpl.digitalPpsIssueVchr-51-[hierarchy done]
                                                        [end]
                                                [else throw error]
                                            [else]
                                                [non pps to pps tier]
                                                [set cardCreateCD = UP: upgrade]
                                                QualificationServiceImpl.processPPSCustToBeQualified-5184-[hierarchy done]
                                [end]     
                        [if awardType == null || !(awardType == EN || MN)]
                            PromotionAwardingData.voidAwardedRecordsInWkgTable
                            PromotionAwardingData.updatePreSelAwdFlg
                    PromotionAwardingFacadeImpl.tagPreSeletedAsAwarded-325
                        PromotionAwardingData.updatePreSelAwdFlg
        [if forceCredit and pax manifest]
            [set promo type to SA]
            PromotionAwardingFacadeImpl.awardPromotion-177-[hierarchy done]
        [if not forceCredit and not pax manifest]
            [set promo type to QL]
            PromotionAwardingFacadeImpl.awardPromotion-177-[hierarchy done]
        [if not forceCredit and not pax manifest]
            [set promo type to AQ]
            PromotionAwardingFacadeImpl.awardPromotion-177-[hierarchy done]
        PromotionAwardingImpl.voidExtractedRecordsInTransTables-518
            PromotionAwardingData.updatePromotionFlagInTransTables


RetroFacadeImpl.awardRetroPromotionAfterReversal-96
    [receives intId: long, userId: String]
    [initialise paramList]
    PromotionAwardingFacadeImpl.awardPromotionsAfterReversal-389
        [receives intId: long, batchUserId: String]
        PromotionAwardingData.getAwardableMembersAfterReversal--[returns list of awardableMembers]
        [if awardableMembers list not empty]
            [loop over each PromotionAward]
                [extract PromotionAward as award var from the list]
                [if award.promoType != QL]
                    PromotionAwardingImpl.awardPromotionFFPEliteBonus-86-[hierarchy done]
                [else]
                    PromotionAwardingImpl.awardQualificationPromotion-498-[hierarchy done]
        [end]
    [end]


BatchAirRetroServiceImpl.processTD-1045
    BatchAirRetroServiceImpl.reverseMiles-1075
        AirAccrualImpl.performAirReversal-125
            [if fltInfo != null]
                UtilServiceImpl.getTransRefId-24
                    ValidatorImpl.getSystemDate-263
                        ReferenceData.getSystemDate
                        CommonUtilFunctions.convertToBase36
                AirAccrualValidatorImpl.validateAmendmentCd-25
                    NonAirAccrualData.validateAmendmentCd
                [if not amendmentCd]
                    AirAccrualImpl.createRejTxn-3264-[insert record into table at_rej_trans and rej_trans_err]
                        AirAccrualImpl.getNonAccruableRsnCd-3335
                            RefTableData.searchReference
                    AirAccrualImpl.createRejTxn-2661-[insert record into table at_rej_trans and rej_trans_err]
                        AccrualData.createRejTxn
                        AirAccrualImpl.validateAccrualAndSendMail-3117
                            AirAccrualImpl.sendEmailOnValidationFailure-3154-[hierarchy on sending email]
                        AirAccrualImpl.nonAccrualTransDupChk-3073
                            AirAccrualValidatorImpl.checkNonAccruableDuplicate-40
                                AccrualData.checkNonAccruableDuplicate-1588-[mapper method only, no other methods called]
                        AirAccrualImpl.createNonAccruableTrans-2823
                            UtilServiceImpl.getTransRefId-24-[hierarchy done]
                            AccrualData.createNonAirTrans
                            AirAccrualImpl.updateNonTransLastActivityDt-2937
                                [create new mileageSum object]
                                PointsHandlerImpl.updateMileageSum-1227-[hierarchy done]
                                [end]
                            AirAccrualImpl.updateAcctStatus-2979
                                [deconstruct the accrualPax object]
                                [if acctStatus == D || acctStatus == X || acctStatus == E]
                                    CustomerServiceImpl.updateAccountStatus-663
                                        CustomerAcctData.updateAccountStatus-
                                        [end]
                                    CollateralImpl.requestNewPlasticCardForAcctStChg-58-[To generate new plastic card request upon the first travel of the customer for the given internal id, during account status change from E->A, (E->D)->A and (E->D->X)->A]
                                        CollateralImpl.getCurrentCard-1825
                                            CardData.load
                                        CollateralImpl.requestCardReIssuance-142
                                            CollateralImpl.getCustomerID-1812
                                                CardData.getCustomerID
                                                [end]
                                            CollateralImpl.getCardSequenceNumber-1793
                                                CardData.generateCardSequence
                                                [end]
                                            CollateralImpl.getSupplementaryInternalID-1776-[returns sup int id]
                                                CardData.getSupplementaryInternalID-
                                                [end]
                                            [if sup int id != 0]
                                                CollateralImpl.getCurrentSuppCard-1757
                                                    CardData.getSupplementaryCard-
                                                    [end]
                                            CollateralImpl.checkFortheCardIndicator-692
                                                [if card.getCardReIssuanceNameChangeInd == Y && card name change == Y && lostCardReIssuance == Y]
                                                    CollateralImpl.requestCardLostNumberName-1645
                                                        CollateralImpl.getCurrentCard-1825-[hierarchy done]
                                                        CollateralImpl.generateNewNumber-1717
                                                            CustomerIDHandlerImpl.generateInternalID-133
                                                                CustomerIDData.getIDSequence-144
                                                                CustomerIDData.generateInternalID-125
                                                                [end]
                                                        CollateralImpl.UpdateCusAccountCusID-1695
                                                            CardData.UpdateCusAccountCustomerID-140
                                                            [end]
                                                        CollateralImpl.updateMemberPin-1737-[hierarchy done]
                                                    [if sup intID != 0]
                                                        CollateralImpl.requestSuppCardLostNumberName-1621
                                                            CollateralImpl.getCardValidTillDate-1673
                                                                ValidatorImpl.getCtrlParaObject-317
                                                                    ReferenceData.getCtrlParaObject
                                                                    [end]
                                                                [end]
                                                            [if cardReissuanceTypeMedia == L]
                                                                CollateralImpl.updateMemberPin-1737
                                                                    CardData.updateMemberPin-128
                                                    CollateralImpl.getCardLostValues-1603-[find the number of lost card within the period]
                                                        CardData.cardLossCalculation-167
                                                    [if noOfCardLost <= maxCardLost]
                                                        [card.setCardReIssuanceCreateCd("LL")]
                                                    [else set the same field to LM]
                                                [else if cardReIssuanceReplaceInd == Y && cardReIssuanceNoChangeInd == Y && cardReIssuanceNameChangeInd == Y]
                                                    CollateralImpl.requestCardReplacementNumberandName-1573
                                                        CollateralImpl.getCurrentCard-1825-[hierarchy done]
                                                        CollateralImpl.generateNewNumber-1717-[hierarchy done]
                                                        CollateralImpl.UpdateCusAccountCusID-1695-[hierarchy done]
                                                        CollateralImpl.getCardValidTillDate-1673-[hierarchy done]
                                                        CollateralImpl.updateMemberPin-1737-[hierarchy done]
                                                    [if sup int id != 0]
                                                        CollateralImpl.requestSuppCardReplacementNumberandName-1546
                                                            CollateralImpl.getCardValidTillDate-1673-[hierarchy done]
                                                            CollateralImpl.updateMemberPin-1737-[hierarchy done]
                                                [else if cardReIssuanceNoChangeInd == Y && cardREIssuanceNameChangeInd == Y]
                                                    CollateralImpl.requestCardNoandName-1517
                                                        CollateralImpl.getCurrentCard--1825-[hierarchy done]
                                                        CollateralImpl.generateNewNumber-1717-[hierarchy done]
                                                        CollateralImpl.UpdateCusAccountCusID-1695-[hierarchy done]
                                                        CollateralImpl.getCardValidTillDate-1673-[hierarchy done]
                                                        CollateralImpl.updateMemberPin-1737-[hierarchy done]
                                                    [if sup intID != 0]
                                                        CollateralImpl.requestSuppCardNoandName-1492
                                                            CollateralImpl.getCardValidTillDate-1673-[hierarchy done]
                                                            CollateralImpl.updateMemberPin-1737-[hierarchy done]
                                                [else if card.getCardReIssuanceNoChangeInd().equals("Y") && card.getLostCardReIssuanceInd().equals("Y")]
                                                    CollateralImpl.requestCardLostNumber-1464
                                                        CollateralImpl.getCurrentCard-1825-[hierarchy done]
                                                        CollateralImpl.generateNewNumber-1717-[hierarchy done]
                                                        CollateralImpl.UpdateCusAccountCusID-1695-[hierarchy done]
                                                        CollateralImpl.updateMemberPin-1737-[hierarchy done]
                                                    [if sup intid != 0]
                                                        CollateralImpl.requestSuppCardLostNumber-1440
                                                            CollateralImpl.getCardValidTillDate-1673-[hierarchy done]
                                                            CollateralImpl.updateMemberPin-1737-[hierarchy done]
                                                    CollateralImpl.getCardLostValues-1603-[find the no of lost card within the period]-[hierarchy done]-[hierarchy done]
                                                    [if noOfCardLost <= maxCardLost]
                                                        [card.setCardReIssuanceCreateCd("LL")]
                                                    [else set the same field to LM]
                                                [else if card.getCardReIssuanceNameChangeInd().equals("Y") && card.getLostCardReIssuanceInd().equals("Y")]
                                                    CollateralImpl.requestCardLostName-1414
                                                        CollateralImpl.getCurrentCard-1825-[hierarchy done]
                                                        CollateralImpl.updateMemberPin--[hierarchy done]
                                                    [if sup intid != 0]
                                                        CollateralImpl.requestSuppCardLostName-1389
                                                            CollateralImpl.updateMemberPin--[hierarchy done]
                                                    CollateralImpl.getCardLostValues-1603-[hierarchy done]
                                                    [if noOfCardLost <= maxCardLost]
                                                        [card.setCardReIssuanceCreateCd("LL")]
                                                    [else set the same field to LM]
                                                [else if card.getCardReIssuanceNameChangeInd().equals("Y") && card.getCardReIssuanceReplacementInd().equals("Y")]
                                                    CollateralImpl.requestCardReplacementandName-1366
                                                        CollateralImpl.getCurrentCard--[hierarchy done]
                                                    [if sup intid != 0]
                                                        CollateralImpl.requestSuppCardReplacementandName-1348
                                                            [setting parameter variables only]
                                                [else if card.getCardReIssuanceNoChangeInd().equals("Y") && card.getCardReIssuanceReplacementInd().equals("Y")]
                                                    CollateralImpl.requestCardReplacementandNumber-1318-[hierarchy similar to above]
                                                    CollateralImpl.requestSuppCardReplacementandNumber-1293-[hierarchy similar to above]
                                                [else if card.getCardReIssuanceNoChangeInd().equals("Y")]
                                                    CollateralImpl.requestCardNumber-1259-[hierarchy similar to above]
                                                    CollateralImpl.requestSuppCardNumber-1234-[hierarchy similar]
                                                [else if card.getCardReIssuanceNameChangeInd().equals("Y")]
                                                    CollateralImpl.requestCardName-1209-[hierarchy similar]
                                                    CollateralImpl.requestSuppCardName-1190-[hierarchy similar]
                                                [else if card.getCardReIssuanceReplacementInd().equals("Y")]
                                                    CollateralImpl.requestCardReplacement-1166-[hierarchy similar]
                                                    CollateralImpl.requestSuppCardReplacement-1148-[hierarchy similar]
                                                [else if card.getLostCardReIssuanceInd().equals("Y")]
                                                    CollateralImpl.requestCardLoss-981-[hierarchy similar]
                                                    CollateralImpl.requestSuppCardLoss-946-[hierarchy similar]
                                                    CollateralImpl.getCardLostValues-1603-[hierarchy done]
                                                [else if card.getKitsResendInd().equals("Y")]
                                                    CollateralImpl.requestCardKitsResend-923-[hierarchy similar]
                                                    CollateralImpl.requestSuppCardKitsResend-900-[hierarchy similar]
                                                [else if check for no indicator]
                                                    CollateralImpl.requestWithNoIndicator-881-[hierarchy similar]
                                                    CollateralImpl.requestSuppWithNoIndicator-864-[hierarchy same]
                                                [end]
                                            CollateralImpl.updateCurrentCard-671-[returns success int]
                                                CardData.invalidateCurrentCard-
                                                [end]
                                            [if success == 1]
                                                CollateralImpl.updateCusPersforName-619-[returns success int]
                                                    CardData.UpdateCusPersCardName-332
                                                    CardData.UpdateCusSupplCardName-315
                                                    [end]
                                                [if success == 1]
                                                    CollateralImpl.updateCardValidTillDateForRequest-592
                                                        CardData.UpdateCusAccountCardValidTilldate-
                                                        [end]
                                                    [if success == 1]
                                                        CollateralImpl.adminFeeTransaction-318
                                                            AdminFeeImpl.setAdminFeePayment-42
                                                                [iterate over the admin fee transactions from parameter]
                                                                AdminFeeImpl.adjustTransaction-182
                                                                    [series of checks to update the adminFeeTransaction obj before returning same obj]
                                                                ValidatorImpl.getParticipantAbbr--[hierarchy done]
                                                                AdminFeeData.create--[input the adminTrans Obj]
                                                                [if adminFeeRecord.paymentType == MI] [miles payment only]
                                                                    AdminFeeImpl.updateMileageSummary-254
                                                                        PointsHandlerImpl.updateMileageSum-1227-[hierarchy done]
                                                                    AdminFeeImpl.updateCusMonthlyPts-288-[update cus_ffp_mth_pts]
                                                                        PointsHandlerImpl.updateCusMthPts-1661-[hierarchy done]
                                                                    AdminFeeImpl.deductPtsFromBuckets-322-[update trans_bucket_pts and cus_bucket_pts]
                                                                        PointsHandlerData.getCustomBuckets--[if batchFlowInd == Y]
                                                                        PointsHandlerData.getUnexpiredBuckets-[else]
                                                                        PointsHandlerImpl.deductPtsFromCusBuckets-154-[hierarchy done]
                                                                    AdminFeeImpl.updateInsertPrtTransMthPts-344-[update or insert prt_trans_mth_pts]
                                                                        PointsHandlerImpl.updatePrtTransMthPts-1638-[hierarchy done]
                                                                    AdminFeeImpl.createEventLog-376
                                                                        EventLogServiceImpl.createEventLog-376-[hierarchy done]
                                                                    PointsHandlerImpl.getCurrentBalance-1687
                                                                        PointsHandlerData.queryMileageSum
                                                                        OverdraftImpl.getOutstandingODPoints-316-[hierarchy done]
                                                                    [recreate a new adminFeeTrans obj]
                                                                    [insert the adminFeeTrans obj into new arr]
                                                                [end new adminFeeTrans arr obj]
                                                            [return approval code]
                                                            [end]
                                                        CustomerData.getAccountStatus-
                                                        CollateralImpl.insertUpdatedCard-364
                                                            CardData.create-282
                                                            [end]
                                                        [if success == 1]
                                                            [start issue supplementary card for supplementary member's change of name]
                                                            CollateralImpl.getPrincipalInternalID-344-[returns princialIntid]
                                                                CardData.checkIfSupplementaryMbr
                                                            [if principalIntid != 0 && cardReIssuanceReplacement == Y]
                                                                CollateralImpl.getCurrentCard-1825-[hierarchy done]
                                                                CollateralImpl.requestSuppCardReplacement-1148-[hierarchy similar]
                                                                CollateralImpl.suppcardTransaction-1018
                                                                    [clone current card to suppl card]
                                                                    CardData.getSupCustomerID-214
                                                                    CollateralImpl.updateRequestSuppCard-1122
                                                                        CardData.invalidateCurrentCard
                                                                        [end]
                                                                    CollateralImpl.insertRequestSuppCard-1053
                                                                        CardData.create
                                                                        [end]
                                                                    [end]
                                                            [else]
                                                                [if supplementary card exists]
                                                                    [if card downgrade flg == Y]
                                                                        CollateralImpl.inValidateSupCard-472
                                                                            CardData.invalidateCurrentCard-
                                                                    [else]
                                                                        [if CollateralImpl.checkTierStatus-491]
                                                                            CollateralImpl.suppcardTransaction-1018-[hierarchy done]
                                                                [if card.getCardReIssuanceNoChangeInd == Y || card.getCardReIssuanceNameChangeInd().equals("Y") || card.getLostCardReIssuanceInd().equals("Y")]
                                                                    CollateralImpl.issueSupplementaryCard-534
                                                                        CardData.checkIfSupplementaryMbr
                                                                        CollateralImpl.getCurrentSuppCard-1757-[returns suppCard, hierarchy done]
                                                                        [if suppCard != null] [card found]
                                                                            [return 1, no need to continue]
                                                                        [if code reaches here, create new suppCard obj]
                                                                        CollateralImpl.updateRequestSuppCard-1122-[hierarchy done]
                                                                        CollateralImpl.insertRequestSuppCard-1053-[hierarchy done]
                                                                        [end]
                                                            [if success == 1]
                                                                CollateralImpl.processYECUpdate-514-[set yec flg to N if current card is YEC card]
                                                                    YECConversionData.updateYECIndicator
                                                                CollateralImpl.eventLogGenerate-410
                                                                    EventLogServiceImpl.createEventLog-376-[hierarchy done]
                                            [populate resultrec with error codes depending on the updates above]
                                            [populate the vector with cusID, cardReIssuanceName and approvalCd]
                                            [return vector]
                                            [end]
                                        CollateralImpl.getCardCreateCode-117
                                            CustomerServiceImpl.getCustomerParticulars-575-[returns customerParticulars obj]
                                                CustomerData.getCustomerParticulars-
                                            [if customerParticulars.getPartnerPromoCode not null]
                                                PromotionAwardingData.getCardcreateCodeForPromoCd-4065
                                                [return cardCreateCd]
                                                [end]
                                        CardData.updatePendingCardRequest
                                    [if returned result == 0 throw error]
                                    [if result == 1]
                                    AirAccrualImpl.sendEmail-8409-[hierarchy about sending email]
                                    QualificationServiceImpl.createEventLog-8281-[if customertier != null && tktInfo != null && paxInfo != null]
                                        EventLogServiceImpl.createEventLog-376
                                            EventLogServiceImpl.checkReferenceCode-46
                                                ReferenceCdMapper.checkReferenceCode
                                            EventLogServiceImpl.addEventLog-330
                                                EventLogServiceImpl.createNew-224
                                                    CusEventLogMapper.insertEventLog
                                                    CusEventLogMapper.getEventDescByEventId
                                                    EventLogServiceImpl.createEMailFUP-82
                                                        UsrProfileDtlMapper.getEmailAddrDtl
                                                        CusEventlogFupMapper.insert
                                                        [end]
                                                    EventLogServiceImpl.createAction-138
                                                        CusEventLogActionMapper.insert
                                                    EventLogServiceImpl.createDraftEmail-186
                                                        EventLogServiceImpl.doGenerateEmailContent-201-[hierarchy about email content]
                                                        [end]
                                                [end]
                                [create new CustomerParticulars, set internalID, auditId and setStopMailInd = N]
                                CustomerData.updateStopMailInd-
                                StopMailInfoData.getStopMailInfo--[returns a list of stop mail based on the customerID just updated]
                                [if stopMailList > 0]
                                    [for each stop mail object, set action ind to C and add to new stop mail list]
                                    StopMailInfoData.updateStopMailInfo-
                                    [end]
                            AirAccrualImpl.createNameUnMatchRec-2917
                                AccrualData.createNameUnMatchRec-1726
                                [end]
                            AirAccrualImpl.createOrUpdatePndgAcct-2865
                                [deconstruct accrualPax to create pendingCustomer(pndg) object]
                                PendingCustomerData.updatePndgTxn-64-[return success int]
                                [if success == 0]
                                    PendingCustomerData.insertPndgTxn
                                [end]
                [else if code share flight]
                    AirAccrualImpl.determineCodeShare-2636
                        [validates the parameters passed in, no other methods called]
                    AirAccrualImpl.getPayPrinciple-1696
                        AccrualValidatorImpl.getCodeShareCombi-1496
                            AccrualData.getCodeShareCombi
                [else if not code share flight]
                    [set fltInfo]
                [if acrBatch.getBatchID == null]
                    AirAccrualImpl.generateBatchId-1467
                        ValidatorImpl.getParticipantAbbr-294
                            ReferenceData.getParticipantAbbr
                        CommonUtilFunctions.convertJulianDate
                        CommonUtilFunctions.padLeft
                AirAccrualImpl.getCustomerInternalID-1492
                    CustomerIDData.getCustomerInternalID
                [if getCustomerInternalID returns 0]
                    AirAccrualImpl.getPndgCustomerInternalID-1514
                        CustomerIDData.getPndgCustomerInternalID
                [if intID still 0]
                    AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                    AirAccrualImpl.createRejTxn-2661-[hierarchy done]
                [else]
                    AirAccrualImpl.airReversalDupChk-1388-[returns creditFFPLst]
                        AccrualValidatorImpl.checkAirDuplicate-1520-[hierarchy done]
                        OFFPAccrualData.checkOFFPDuplicate-208
                        OFFPAccrualData.checkOFFPCdDuplicate-157-[hierarchy done]
                    AirAccrualImpl.nonAccruableTransReversalDupChk-1354-[returns nonAccruableTransLst]
                        AccrualValidatorImpl.checkNonAccruableDuplicate-1427
                            AccrualData.checkNonAccruableDuplicate
                    [if creditFFPLst.size() > 0]
                        AirAccrualImpl.processReversal-277
                            AirAccrualImpl.checkReversalBucketFlg-6679
                                [compare and update bucket flags in accrualTrans VO according. Found duplicate, bucket flags will be set to Y, allow to reverse]                        
                            [loops over the accrual objects]
                            PromotionAwardingFacadeImpl.getAvailablePromotionPoints[call promotion interface which returns miles, getting miles from promotion based on promoTransXRefId]
                                [series of check conditions]
                                PromotionAwardingData.getAvailablePromotionPoints-5680
                            PointsHandlerImpl.checkSufficientPts-1157-[returns suffPts]
                                PointsHandlerData.calculateCurBal
                                PointsHandlerData.checkSumEqualsCurBal
                            [if suffPts >= 0]
                                AirAccrualImpl.reverseMiles-481-[TC or AC record found, can perform reversal]
                                    AirAccrualImpl.checkForReverseCredit-415-[acrPts derived from accrualPax send for reversal to check the input indicators, acrPtsTxn derived from database]
                                        [series of checks of the input parameters]
                                    AirAccrualImpl.createFfpPoints-453-[create reverse ffp points]
                                        [create FfpPoints from the input parameters]
                                    AirAccrualImpl.generateCrossRefSeq-[Cross Ref id to link up TC/TD pair]                            
                                        AccrualData.generateCrossRefSeq
                                    AirAccrualImpl.createReverseAirTrans-802-[Create AD or TD transaction]
                                        AccrualData.createReverseAirTrans                                                        
                                    [if acrPts.getPPSOnHoldFlg() != null && acrPts.getPPSOnHoldFlg().equals("Y")]
                                        AirAccrualImpl.updateRvsePPSFlgs-764-[Update reverse flag to Y for TC rec in AT_TRANS]
                                            AccrualData.updateRvsePPSFlgs                                                                
                                    [else]
                                        AirAccrualImpl.updateRvseFlgToY-743
                                            AccrualData.updateRvseFlgToY
                                    [if acrPts.getReverseFFPFlg().equals("Y")]
                                        PointsHandlerImpl.updateFfpPts-480-[Reverse FFP points]
                                            [unpack the parameters into local variables]
                                            [set expiry date]
                                            [create ticketSourceInfo]
                                            [if acrPts.isTransferMilesFlg()]
                                                PointsHandlerImpl.creditBktsMilesTransfer-1280
                                                    [loops through the bucket passed in as parameter]
                                                    [first try to deduct from the current bucket's extended points]
                                                    [then try to deduct from the current bucket's normal points]
                                                    [write the transaction into TRANS_BUCKET_PTS]
                                                    [write the transaction into CUS_BUCKET_PTS]
                                                    PointsHandlerImpl.insertTransBucketPts-1396-[insert trans bkt pts]
                                                        PointsHandlerData.insertTransBucketPts
                                                    PointsHandlerImpl.updateCusBucketPts-1417
                                                        PointsHandlerData.update
                                            [else]
                                                PointsHandlerImpl.createQtrBktPts-1468-[create quarterlyBucketPoints from parameters]
                                                    [stop here]
                                                PointsHandlerImpl.createCusBktPts-1058-[create cusBucketPoints from parameters, hierarchy not important]                                            
                                                PointsHandlerImpl.createTransPts-430-[create TransBucketPoints from parameters, hierarchy not important]                                        
                                                PointsHandlerImpl.updateCusBucketPts-1417-[Update cust bkt pts]
                                                    PointsHandlerData.update
                                                PointsHandlerImpl.insertTransBucketPts-1396-[insert trans bkt pts]
                                                    PointsHandlerData.insertTransBucketPts-154-[reversal transactions]
                                            [if txnCd == TD || txnCd == SD || txnCd == ZD || txnCd == AD]
                                                PointsHandlerImpl.deductPtsFromCusBuckets-154
                                                    [if tkt.getBatchFlowInd == Y]
                                                        PointsHandlerData.getCustomBuckets
                                                    [else]
                                                        PointsHandlerData.getUnexpiredBuckets
                                                    [update trans_bucket_pts and cus_bucket_pts tables]
                                                    PointsHandlerImpl.deductFromBuckets-1484
                                                        [first try to deduct from current buckets extended points]
                                                        [then try to deduct from the current buckets normal points]
                                                        [write the transaction into trans_bucket_pts]
                                                        [write the transaction into cus_bucket_pts]
                                                        [if transCd == RD or some other values]
                                                            PointsHandlerImpl.insertRdpnBucketPts-1592
                                                                PointsHandlerData.insertRdpnBucketPts
                                                        [else]
                                                            PointsHandlerImpl.insertTransBucketPts-1396
                                                                PointsHandlerData.insertTransBucketPts
                                                        PointsHandlerImpl.adjustCusBucketPts-1613
                                                            PointsHandlerData.adjustCusBucketPts
                                            PointsHandlerImpl.createCusMthPts-741-[create cusMonthly points, create cusMonthlyPoints obj, no mtd calls, hierarchy done]                                            
                                            PointsHandlerImpl.createMileSum-984-[create MileageSum obj, no other mtd calls, hierarchy done]                                            
                                            PointsHandlerImpl.updateMileageSum-1227
                                                PointsHandlerData.updateMileageSum--[update]
                                                PointsHandlerImpl.insertMileageSum-1259-[if no record found]
                                                    PointsHandlerData.insertMileageSum
                                            PointsHandlerImpl.updateCusMthPts-1661
                                                PointsHandlerData.updateCusMthPts--[update]
                                                PointsHandlerImpl.insertCusMthPts-1202-[insert if record not found]
                                                    PointsHandlerData.queryCusMonthlyPts--[query opening balance]
                                                    PointsHandlerData.insertCusMthPts
                                            [if airNonAirInd == AIR]
                                                PointsHandlerImpl.updatePrtCusATFFPPts-930
                                                    PointsHandlerData.updatePrtCusNATFFPPts--[update]
                                                    PointsHandlerImpl.insertPrtCusATFFPPts-959-[insert if record not found]
                                                        PointsHandlerData.insertPrtCusATFFPPts
                                            [if airNonAirInd == NONAIR]
                                                PointsHandlerImpl.updatePrtCusNATFFPPts-874
                                                    PointsHandlerData.updatePrtCusNATFFPPts--[update]
                                                    PointsHandlerImpl.insertPrtCusNATFFPPts-906-[insert if not present]
                                                        PointsHandlerData.insertPrtCusNATFFPPts
                                            PointsHandlerImpl.updatePrtCusFFPPts-820
                                                PointsHandlerData.updatePrtCusFFPPts--[update]
                                                PointsHandlerImpl.insertPrtCusFFPPts-849-[insert if record not found]
                                                    PointsHandlerData.insertPrtCusFFPPts
                                            ValidatorImpl.getChargeRate-164-[validate charge rate]
                                                ReferenceData.getChargeRate
                                            [if txnCd == TC || txnCd == AC || txnCd == ZC || txnCd == SC]
                                                [check for overdraft]
                                                OverdraftImpl.getOutstandingODPoints-316
                                                    OverdraftData.getOutstandingODBuckets
                                                [based on outstandingODPoints set the transInd accordingly]
                                                [if acrPts.getPtsAwded > 0]
                                                    OverdraftImpl.handleODPayback-41
                                                        OverdraftData.getOutstandingODBuckets--[get the cus_od_bucket based on odXrefId]
                                                        OverdraftData.updatePaybackDetails--[update the specific cus_od_bucket]
                                                        OverdraftImpl.getPersonalDetails-292-[first fetch the customer details]
                                                            OverdraftData.getFamilyGivenNames
                                                        OverdraftImpl.insertNonAirTrackingTrans-178
                                                            OverdraftData.getNextValFromSeq--[generate reference cd]
                                                            [set up nonAirAwardDetails obj] [set up accrualBatch obj] [set up passengerInfo obj] [set up accrualPoints obj]
                                                            OverdraftImpl.setAccrualPax-276-[hierarchy done, no mtd called]
                                                            NonAirAccrualImpl.insertNonAirRecord-33
                                                                CustomerServiceImpl.getcustomerID-526-[get internal id for given customerid]
                                                                    CustomerIDHandlerImpl.getCustomerID-108
                                                                        CustomerIDData.checkInternalIDExistence
                                                                        CustomerIDData.getCustomerID
                                                                AccrualData.getATTransId
                                                                UtilServiceImpl.getTransRefId-24-[generate the transXrefID, hierarchy done]
                                                                NonAirAccrualData.insertNonAirAccrual
                                                        PointsHandlerImpl.deductPtsFromCusBuckets-154-[deducts pts from cus_bucket_pts, hierarchy done] 
                                                        PointsHandlerImpl.updateOverdraftFfpPts-192-[set the odBucket variable and update]
                                                            PointsHandlerImpl.createTransPts-430-[no mtd calls, hierarchy done]
                                                            PointsHandlerImpl.createMileSum-390-[no mtd calls, hierarchy done]
                                                            PointsHandlerImpl.createCusMthPts-344
                                                                CommonUtilFunctions.getFirstDayOfMth
                                                            PointsHandlerImpl.createPrtTransMthPts-314
                                                                CommonUtilFunctions.getFirstDayOfMth
                                                            PointsHandlerImpl.insertTransBucketPts-1396-[hierarchy done]
                                                            PointsHandlerImpl.updateMileageSum-1227
                                                                PointsHandlerData.updateMileageSum
                                                            PointsHandlerImpl.updateCusMthPts-1661
                                                                PointsHandlerData.updateCusMthPts
                                                                PointsHandlerImpl.insertCusMthPts-1202-[hierarchy done]
                                                            PointsHandlerImpl.updatePrtTransMthPts-1638
                                                                PointsHandlerData.updatePrtTransMthPts
                                                                PointsHandlerImpl.insertPrtTransMthPts-273
                                                                    PointsHandlerData.calculatePrtPtsOpeningBalance
                                                                    PointsHandlerData.insertPrtTransMthPts
                                                            PointsHandlerImpl.updatePrtCusNATFFPPts-874-[hierarchy done]
                                                            PointsHandlerImpl.updatePrtCusFFPPts-820-[hierarchy done]
                                                        OverdraftData.insertODXrefLink--[write into od_xref_link]                                                
                                                        OverdraftImpl.createEventLog-125-[create event log]
                                                            EventLogServiceImpl.createEventLog-376-[hierarchy not important]
                                                [if outstandingODPts > 0 && acrPts.getTierBonus() > 0]
                                                    OverdraftImpl.handleODPayback-41-[hierarchy done]
                                                [if outstandingODPts > 0 && acrPts.getPromoPts() > 0]
                                                    OverdraftImpl.handleODPayback-41-[hierarchy done]
                                    [if paxInfo.getTierStatus() == null]
                                        TierHandlerImpl.getCustomerCurrentTier-154
                                            TierHandlerData.getCustomerCurrentTier
                                    AirAccrualImpl.updateQualificationBucket-1301
                                        QualificationServiceImpl.updateQualificationBucket-7053
                                            QualificationServiceImpl.getInternalId-8330
                                                CustomerIDHandlerImpl.getCustomerInternalID-84
                                                    CustomerIDData.getCustomerInternalID
                                            [check if the transaction is debit, then ensure the miles and sectors are having -ve sign, else +ve sign]
                                            [if target_bucket == elite]
                                                QualificationServiceImpl.getEliteCustomerData-8247
                                                    QualificationData.vLoadVO
                                                QualificationServiceImpl.createEliteCustomerData-8161
                                                    QualificationServiceImpl.getEnrolmentDate-8206
                                                        QualificationData.getEnrolmentDate--[returns enrolDt]
                                                        PendingCustomerData.getPendingCustomerByID--[if enrolDt == null]
                                                    QualificationData.createEliteRecord                                                
                                                QualificationServiceImpl.processEliteBucket-8029
                                                    QualificationData.iUpdateEliteQual
                                                    QualificationServiceImpl.getEliteParticipant-8101-[get elite data by participant]
                                                        EliteParticipantData.load--[returned participant]
                                                        [if returned participantData == null]
                                                            EliteParticipantData.create                                                    
                                                QualificationServiceImpl.processEliteGoldBucket-7924
                                                    QualificationServiceImpl.getEliteGldTrking-7998
                                                        QualificationData.getEliteGoldTrkRecord
                                                    QualificationData.updateEliteGoldTrack
                                                QualificationServiceImpl.processTierMileageSummary-7521-[elite record update returned without exception, continue to update tier mileage summary]
                                                    QualificationServiceImpl.getTierMileageSummary-7865
                                                        TierMileageSummaryData.load
                                                        [if returned TierMileageSummary == null]
                                                            TierMileageSummaryData.create
                                                    [if tierStatus != null && tierStatus.equals("Q") && !TierConstant.SOFT_LAND_QUALIFY_IND.equals(qlfyInd)]
                                                        [if flight date falls outside of current qual period]
                                                            QualificationServiceImpl.getPPSYearQualRecords-7727-[retrieve the record from cus_pps_yr_qual that matches the flight date]
                                                                PPSYearQualData.getPPSYearQualRecords
                                                            [if result.size > 0]
                                                                QualificationServiceImpl.updatePPSYearQualRecord-7700
                                                                    PPSYearQualData.updatePPSYearQualRecord
                                                    [if tierType == PPS && tierStatus == SOLITAIRE || tierStatus == QUALIFIED]
                                                        [if flight date falls outside of current qual period]
                                                            QualificationServiceImpl.matchPPSReserveValRecord-7677-[retrieves record from cus_rsrv_val that matches flightDate, returns record]
                                                                PPSReserveValData.matchPPSReserveValRecord
                                                            ControlParamData.getCtrlParaRef
                                                            [logic to set the local variables of ppsVal, transRsrvVal...]
                                                            QualificationServiceImpl.updatePPSReserveValRecord-7782
                                                                PPSReserveValData.updatePPSReserveValRecord
                                                            TierMileageSummaryData.update
                                                QualificationServiceImpl.processMonthlyPoint-7481-[update monthly points, hierarchy done]
                                                    QualificationServiceImpl.getMonthlyPoint-7807
                                                        MonthlyPointData.load
                                                        MonthlyPointData.create--[if not already present]
                                            [else if target_bucket == pps]
                                                QualificationServiceImpl.getPPSCustomerData-7476-[get customer pps data]
                                                    QualificationData.vLoadVOpps
                                                QualificationServiceImpl.createPPSCustomerData-7435
                                                    QualificationData.createPPSRecord
                                                QualificationServiceImpl.processPPSBucket-7277-[pps record found or created, set miles and sectors]
                                                    [amend customer pps data, validate]
                                                    QualificationData.iUpdatePpsQual--[update customer pps data]
                                                QualificationServiceImpl.processTierMileageSummary-7521-[pps record update with no error, update the tier mileage summary, hierarchy done]                                                
                                                QualificationServiceImpl.processMonthlyPoint-7481-[update monthly points, hierarchy done]
                                            [else if both bucket]
                                                QualificationServiceImpl.getEliteCustomerData-8247-[hierarchy done]                                                
                                                QualificationServiceImpl.createEliteCustomerData-8161-[hierarchy done]
                                                QualificationServiceImpl.processEliteBucket-8029-[hierarchy done]
                                                QualificationServiceImpl.processEliteGoldBucket-7924-[hierarchy done]
                                                QualificationServiceImpl.processTierMileageSummary-7521-[hierarchy done]
                                                QualificationServiceImpl.getPPSCustomerData-7476-[get customer pps data, hierarchy done]
                                                QualificationServiceImpl.createPPSCustomerData-7435-[hierarchy done]
                                                QualificationServiceImpl.processPPSBucket-7277-[pps record found or created, set miles and sectors, hierarchy done]
                                                QualificationServiceImpl.processTierMileageSummary-7521-[pps record update with no error, update the tier mileage summary, hierarchy done]
                                                QualificationServiceImpl.processMonthlyPoint-7481-[update monthly points for elite tier, hierarchy done]
                                                QualificationServiceImpl.processMonthlyPoint-7481-[update monthly points for pps tier, hierarchy done]
                                    PointsHandlerImpl.updatePrtCusATOFFPPts-96-[To deduct points in prt_cus_at_offp_pts]
                                        PointsHandlerData.updatePrtCusATOFFPPts
                                        PointsHandlerImpl.insertPrtCusATOFFPPts-127
                                            PointsHandlerData.insertPrtCusATOFFPPts
                                    PointsHandlerImpl.updatePrtAtOffpMthPts-49-[To deduct points: by prt code and processing mth for the table prt_at_offp_mth_pts]
                                        PointsHandlerData.updatePrtAtOffpMthPts
                                        PointsHandlerImpl.insertPrtAtOffpMthPts-75
                                            PointsHandlerData.insertPrtAtOffpMthPts
                                    AirAccrualImpl.getFfpPpsCreditDate-822
                                        AccrualData.getFfpPpsCreditDate
                                    [Get the existing value from the corresponding tracking type and compare against the value to be deducted , if -ve dont deduct , if not proceed to deduct]
                                    ValidatorImpl.convToMonth-274-[hierarchy not important]
                                    PointsHandlerImpl.chkEligForPPSRevDebit-1114
                                        PointsHandlerData.getPPSAndRevenueForDate                                                                
                                    AirAccrualImpl.updatePPSRevenueTracker-1322
                                        ValidatorImpl.convToMonth-[hierarchy not important]
                                        PointsHandlerImpl.updatePpsRevenueTracker-1071
                                            PointsHandlerData.updateCusMthCumulative
                                    [Call promotion module to reverse promotion]
                                    PromotionAwardingFacadeImpl.reversePromotionAwarding-37
                                        PromotionAwardingFacadeImpl.validateReversalParameters-61-[hierarchy not important, just validation of parameters]                                        
                                        PromotionAwardingImpl.reversePromotionAwarding-536
                                            PromotionAwardingData.getPromotionAwardDetails
                                            PromotionAwardingData.getPendingPPSAwardDetails--[Going to check pending pps promos, Retrieving any pending promo transactions]
                                            PromotionAwardingData.getPromoXrefIdForReversal--[if debitTransXrefId != null]
                                            [for loop]                                                                        
                                                PromotionAwardingImpl.updatePoints-813
                                                    PointsHandlerImpl.updateFfpPts-480-[hierarchy done]
                                                PromotionAwardingData.getPaxmDetails
                                                RewardServiceImpl.getVleByRwdNo-496
                                                    RewardsData.getVleByRwdNo
                                                AirAccrualImpl.changeRewardStatus-7992
                                                    RewardsData.changeRewardStatus
                                                RewardServiceImpl.updateRwdDtls-383-[if rwdNo == null]
                                                    RewardsData.getRwdNbrPaxInfo--[returns list]
                                                    RewardServiceImpl.getVleByRwdNo-496-[hierarchy done]
                                                    AirAccrualImpl.changeRewardStatus-7992-[hierarchy done]                                            
                                                    RewardsData.deleteCusRwdPaxInfo
                                                    RewardServiceImpl.createEventLog-426
                                                        RewardsData.getValuefrmRule
                                                        EventLogServiceImpl.createEventLog-376-[hierarchy not important]
                                                [if award.getM_ElliteBonus() > 0 && award.getPromotionPpsBonus() > 0 and other else if]
                                                    PromotionAwardingImpl.reverseEllitePPS-760
                                                        [both elite and pps bucket]
                                                        PromotionAwardingImpl.updateQualificationBucket-789
                                                            [create ppsAwardInfo obj]
                                                            QualificationServiceImpl.updateQualificationBucket-7053-[hierarchy done]
                                            [end loop]
                                            PromotionAwardingData.updateWkgAndMapAndTransTablesForReversal--[update PRM_AWD_WK, PRM_AWD_MAP,AT_TRANS,NAT_TRANS for reversal]
                                            [if isPPSPromoPending]
                                                PromotionAwardingData.updatePendingPPSAwardDetailsForReversal
                                            [if !promoXrefFlg]
                                                PromotionAwardingData.updatePromoXrefIdForReversal                                                                        
                                    [To update FFP_REVERSE_DT and PPS_REVERSE_DT, with multiple if else checks]
                                    PaxManifestServiceImpl.updatePaxReverseDt-252
                                        PaxMFlightInfoData.updatePaxReverseDt
                                    PaxManifestServiceImpl.updatePaxReverseDtAccStatus-232
                                        PaxMFlightInfoData.updatePaxReverseDtAccStatus                            
                                    AirAccrualImpl.reCreditAfterReversal-839-[recredit if there was a request for partial reversal]
                                        AirAccrualImpl.getATTransId-3361-[obtain new TD transaction cross ref id]
                                            AccrualData.getATTransId
                                        UtilServiceImpl.getTransRefId-24--[hierarchy done above]
                                        AirAccrualImpl.createReCreditAirTrans-927
                                            AccrualData.createReCreditAirTrans--[create recredit air transaction]                                    
                                        [if creditFFPFlg == Y]
                                            AccrualData.checkIfTierBonusAwded--[check if tier bonus was awarded previously, get the bonus awarded]                                    
                                            AirAccrualImpl.accrueFFPMileage-945
                                                PointsHandlerImpl.updateFfpPts-480-[hierarchy done above]
                                        [if creditEliteFlg == Y || transCd == AD]
                                            [award elite and pps for qualification, not required for re-crediting when an AD record for reversal comes in]
                                            AirAccrualImpl.awardElitePPS-1225
                                                [if payPrinciplePrtCd == TR && eliteAwdFlg == Y]
                                                    ControlParamData.getCtrlParaRef--[get elite switch]
                                                    [if eliteTRSwitch not null && eliteTRSwitch == Y]
                                                        AirAccrualImpl.getEliteMultiplier-1275
                                                            AccrualData.getMultiplierValue
                                                [if eliteAwdFlg == Y && ppsAwdFlg == Y && isKF member]
                                                    [call qualification to accrue mileage to both buckets]
                                                    AirAccrualImpl.updateQualificationBucket-1301-[hierarchy is done above]
                                                [else if eliteAwdFlg == Y && isKF member]
                                                    [elite bucket and credit to SQ only]
                                                    AirAccrualImpl.updateQualificationBucket-1301-[hierarchy is done above]
                                                [else if ppsAwdFlg == Y]
                                                    [pps bucket only]
                                                    AirAccrualImpl.updateQualificationBucket-1301-[hierarchy is done above]                                            
                                            PaxManifestServiceImpl.updatePaxRecord-206
                                                PaxMFlightInfoData.updatePaxRecord
                            [else]
                                UtilServiceImpl.getTransRefId-24-[hierarchy done]
                                AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                AirAccrualImpl.createRejTxn-2661-[hierarchy done]
                    [else if nonAccruableTransLst.size > 0]
                        AirAccrualImpl.reverseNonAccruableTrans-1448
                            AccrualData.updateNonAccruableForReverse
                    [else]
                        AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                        AirAccrualImpl.createRejTxn-2661-[hierarchy done]

BatchAirRetroServiceImpl.processTC-1174
    BatchAirRetroServiceImpl.accrueMiles-1197
        [before TC, need to check that the customer account status is not expired, if expired due to inactivity, retro response is accp, change the retro response to D (dormant)]
        [if retro response is KRxx, revert customer account status to expired, provided that the customer does not have any pending air/non-air retro claims]
        RetroCommonService.updateExpiredCustAcctForAccrual-541
            [build customerAcct obj required for updating status, by only creating the customerAcct obj if acct is expired]
            CustomerServiceImpl.updateAccountStatusWithStatusChngDate-553
                CustomerAcctData.updateAccountStatusWithStatusChngDate
        AirAccrualImpl.accrueForAirPartners-1737-[accrue miles]
            AirAccrualImpl.chkAirPartnersElig--[perform validate flight date, check airport, obtain code share info, checkCustomerIntegrity and checkNameMatch]
                ValidatorImpl.validateFlightDate-146-[hierarchy not important]
                [if transCd == TC || transCd == TD]
                    ValidatorImpl.checkAirport-189-[check for origin, hierarchy not important]
                    ValidatorImpl.checkAirport-189-[check for destination, hierarchy not important]
                    ValidatorImpl.validateDiffBoardOff-117-[validate that board point and off point is different, hierarchy not important]
                [if transCd == TC || transCD == TD]
                    AirAccrualImpl.determineCodeShare-2636-[check if carrierCd != cdSharePrtCd, hierarchy not important]
                    AirAccrualImpl.obtainCodeShareInfo-1536-[obtain codeShare flights info if any]
                        [if isCodeShare]
                            AirAccrualImpl.determineFilesRecvPrt-1672
                                [create hashmap and populate it based on the payprinciple]
                            AccrualValidatorImpl.getCodeShareCombi-1496-[hierarchy done]
                            [if no code share combi info]
                                AccrualValidatorImpl.getPrt-1450-[hierarchy done]
                                [if participant found]
                                    AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                [else]
                                    [participant found]
                                    AccrualValidatorImpl.getIATAPrt-1469-[hierarchy done]
                                    [if IATA participant not found]
                                        AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                    [else]
                                        AirAccrualImpl.getPayPrinciple-1696-[hierarchy done]
                                        AirAccrualServiceImpl.getReferenceCode-130-[hierarchy done]
                        [else]
                            [set the billToPrt or createRejTxn]
                            [set the payPrinciple]
                        AirAccrualImpl.setAccrualPax-1659-[hierarchy not important, just setting the object]
                AirAccrualImpl.checkCustomerIntegrity-3549
                    [deconstruct accrualPax object]
                    AirAccrualImpl.checkValidFFPCodeNo-3662-[checking member accrue to SQ or OFFP]
                        AirAccrualImpl.handlePPSPin-3755-[check for ppsPin sent and update the ppsPinCredit according to whether the member has accrued to  SQ or OFFP]
                            [case 1: ppsPin sent and member accrued to OFFP: ffpCredit.setPpsPinCredit(ppsPin)]
                            [case 2: pps pin sent and member accrued to S: ffpCredit.setPpsPinCredit(dcsNo)]
                            [case 3: PPS Pin not sent and member accrured to SQ: return accrualPax, end here]
                            [case 4: PPS Pin not sent and member accrued to OFFP: return accrualPax, end here]
                            [case 5: PPS Pin sent only with no DCS Code and number: set local variables]
                            [return accrualPax and end]
                        [if prtMap containsKey acrBatch.getPayPrincipPrtCd]
                            AirAccrualImpl.setAwardFlgFromPrt-3821
                                [set prtFFPAwdFlg, prtEliteAwdFlg, prtPPSAwdFlg and exclNonExpMilesFlg from Participant obj]
                                [end]
                        [if ffpCode == SQ]
                            AirAccrualImpl.checkIfValidKFMbr-4498-[override accrualPax]
                                [deconstruct the accrualPax obj]
                                AirAccrualImpl.getCustomerDetails-4632-[returns customerSummary obj]
                                    AccrualData.getCustomerDetails--[returns customerSummary obj]
                                    [if customerSummary obj == null]
                                        AccrualData.getPndgCustomer--[get pending customer]
                                    [else]
                                        [get the cardValidDt, CustomerAcctInfo]
                                        [if fltDt is after cardValidDt]
                                            [set customerSummary obj to new empty obj]
                                    [returns customerSummary obj]
                                [if customerSummary obj not null]
                                    [if customerSummary.getcustomerAcctInfo.size == 0]
                                        AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                    [else: the fltDt is before cardValidDt]
                                        AirAccrualImpl.setPaxInfoValues-6729-[set passengerInfo obj from customerAcctInfo obj and customerSummary obj, hierarchy not important, no mtd calls]
                                        [if acctStatus == PA: pending active: setIsPendingCust = true]
                                        [else if acctStatus == PC: pending close]
                                            AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                            [for offp member eligible for pps, need to credit to offp instead of rejecting accrual]
                                                [override the accrualTrans variable]
                                        [else if acctStatus == C: closed]
                                            AirAccrualImpl.processClosedAcctStatus-6746
                                                AirAccrualImpl.getRetainedIdFromMerge-6813
                                                    MergeCustomerData.getRetainedIdFromMerge--[returns the retainedID]
                                                [if retainedID != 0] [accrual to credit to retained account]
                                                    AirAccrualImpl.retrieveRetainedAcct-6840-[retrieve the retained account information (accrualPax) with the retained id]
                                                        [deconstruct accrualPax]
                                                        CustomerServiceImpl.getCustomerID-[hierarchy done]
                                                        AirAccrualImpl.getCustomerDetails-4632-[hierarchy done]
                                                        [update the accrualPax details and end]
                                                    [if acctStatus == C: closed]
                                                        AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                                        [for offp member eligible for pps, need to credit to offp]
                                                [else]
                                                    [member closed not due to merge]
                                                    AirAccrualImpl.createRejTxn--[hierarchy done]
                                                    [for offp member eligible for pps need to credit to offp]
                                                        [acrTxn.setPassEligChk(true)]
                                                    AirAccrualImpl.setAccrualPax-1659-[hierarchy done]
                                                [return accrualPax]
                                [else: customerSummary obj is null, customer not found]
                                    CustomerIDValidatorImpl.validateCustomerIDFormat-12-[returns boolean if format is valid]
                                        [internal checks for customerid format, no other mtds called]
                                    [if not validFormat]
                                        CustomerIDValidatorImpl.getErrorCode-117-[returns local error code, hierarchy not important]
                                        AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                        [if offp member eligible for pps, need to credit for OFFP]
                                    [else]
                                        HousekeepingImpl.searchPurgedMemLst-24-[returns purged list]
                                            HouseKeepingTableData.searchPurgedMemLst
                                        [if purged list size > 0: createRejTxn]
                                        AirAccrualImpl.chkCustIDRange-6896-[returns isWithinRange boolean]
                                            CustomerIDData.chkCustIDRange
                                        [if withinRange == true: createRejTxn because customer id not found]
                                        [else: not within range]
                                            AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                            [for offp member eligible for pps, need to credit to offp instead of rejecting accrual]
                                AirAccrualImpl.setAccrualPax--[hierarchy done]
                        [else]
                            [ffpCode not SQ]
                            AirAccrualImpl.checkIfValidOFFPMbr-4241-[override accrualPax]
                                [deconstruct the accrualPax]
                                [if participant obj is null]
                                    AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                    [return accrualPax]
                                [else]
                                    [if offpAwdEligFlg == Y]
                                        [if cdShr.getCarrier == MI]
                                            AccrualValidatorImpl.getPrtForMI-821-[returns offpPrt]
                                                AccrualData.getPrtForMI
                                        [else]
                                            AccrualValidatorImpl.getPrt-1450-[return offpPrt]
                                                AccrualData.getPrt
                                        [isValidPrt is true if cdShr.getCarrier == SQ and applForSQFlg == Y || cdShr.getCarrier == MI and applForMIFlg == Y]
                                        [if isValidPrt == false]
                                            AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                                        [else]
                                            CheckValidator.validateCheckDigit-13-[returns boolean checkDig]
                                            [if checkDig == false]
                                                AirAccrualImpl.createRejTxn--[hierarchy done]
                                            OFFPAccrualData.checkIfBlackListExists--[returns boolean, check if exists in blacklist]
                                            [if exist in blacklist]
                                                AirAccrualImpl.createRejTrans--[hierarchy done]
                                    [else]
                                        [offp is not eligible for award]
                                        AirAccrualImpl.createRejTxn--[hierarchy done]
                                    [if flownCls == Y and bookedCls == Y]
                                        [member not eligible gor pps accrual]
                                    [else if ppsPinCr != null]
                                        AirAccrualImpl.checkIfValidKFMbr--[hierarchy done]
                                        [if acrTxn.getPassEligChk == false]
                                            [pps pin not valid, perform for offp association]
                                            AirAccrualImpl.getOFFPIntID-4819-[return intid]
                                                AccrualData.getOFFPIntID-
                                            [if intid > 0]
                                                AirAccrualImpl.getcustomerID-4840-[returns cusid]
                                                    CustomerIDData.getCustomerID
                                                [if cusid != null]
                                                    AirAccrualImpl.checkIfValidKFMbr--[hierarchy done]
                                                [else]
                                                    [intid not found, set pps flg = N]
                                    [else]
                                        AirAccrualImpl.getOFFPIntID--[hierarchy done, returns intid]
                                        [if intid > 0]
                                            AirAccrualImpl.getCustomerID--[hierarchy done, returns cusid]
                                        [if cusid != null]
                                            AirAccrualImpl.checkIfValidKFMbr--[hierarchy done]
                                    [returns accrualPax and end]
                        [return accrualPax and end]
                    [if not pendingCustomer]
                        [if credit to OFFP and cusID not found, not required to perform account status func check]
                            [flag = true]
                        [else]
                            CustomerServiceImpl.verifyAcctStatusFuncEligibility-496-[returns boolean stored in flag variable]
                                CustomerData.getAcctStatusFuncEligibility--[returns eligibility string Y or N]
                                [returns eligibilityStr == Y]
                        [if flag == false]
                            [if paxInfo.getAccountStatus().equalsIgnoreCase("X") && acrTxn.getInputModeInd() != null && acrTxn.getInputModeInd().equals("A") && paxInfo.getIsKF()]
                                AirAccrualImpl.sendEmailToExpiredMembers-4859
                                    CustomerServiceImpl.getCustomerParticulars--[hierarchy done]
                                    EmailValidator.validateMailId--[validates email, hierarchy not important]
                                    [if emailID not null]
                                        AirAccrualImpl.getAcknowledgementEmailContentToExpMembers-4911
                                            CustomerServiceImpl.getValidEmail-592-[returns emailID]
                                                CustomerData.getEmailAddress--[returns email address]
                                                StopMailInfoData.checkStopMail--
                                            CustomerServiceImpl.isPPSCustomer-644-[returns boolean]
                                                CustomerAcctData.getTierStatusIndicator
                                                [if tierStatus == Q || tierStatus == T || tierStatus == L]
                                                [return true]
                                                [else return false]
                                            [depending on if customer is pps customer, create the content of the email]
                                            [populate the emailParam map]
                                            EmailServiceImpl.loadEmailInfo-446-[load emailInfo value object, hierarchy about email]
                                            EmailServiceImpl.sendCorpEmail-103-[sends email and returns message Id, hierarchy about email sending]
                                            [if message id != 0]
                                                RetroRequestData.updateEmailMessageId
                                            [end]
                                        AirAccrualImpl.createEventLogForAccrualRequest-5025
                                            [create eventLog obj]
                                            EventLogServiceImpl.createEventLog-376-[hierarchy done]
                                    [returns emailID]
                                AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                            [else]
                                AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                        [if is KF member]
                            CustomerServiceImpl.verifyCustomerTypeFunc-466-[return boolean flag]
                                CustomerAcctData.getCustomerTypeFuncEligibility
                            [if flag == false]
                                AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                    [set accrualTrans and accrualBatch in accrualPax returns accrualPax]
                [if isPendingCust == true && intID > 0 || isPendingCust == true && familyName != null]
                    [perform name check]
                    ControlParamData.getCtrlParaRef
                    [if nameChkFlg == Y]                    
                        AccrualValidatorImpl.checkNameMatchNew-930
                            [if persFamilyName not null or empty and persGivenName not null or empty]
                                AccrualValidatorImpl.generateName-1346-[to generate membership name]
                                    [append familyName and givenName together]
                            [if familyName not null and givenName not null and familyName == givenName]
                                CommonUtilFunctions.splitString--[returns a list of names]
                                [if nameList not empty: accrualName = familyName]
                                [else: generateName-1346]
                            [else if accrual family name and given name is duplicated]
                                AccrualValidatorImpl.performDupAccrlNameChk-998-[check if accrual accrual family and given name are duplicated]
                                    [split the parameters into list and check name is present in list]
                            [if membershipName and accrualName not empty]
                                AccrualValidatorImpl.performNameCheckLogicNew-1070
                                    [step 1: kf membership name and accrual name will be broken into smaller units]
                                    [step 2: certain units and elements will be stripped off from both membership name and accrual name]
                                    [step 2.1: single name check]
                                    [step 2.1.1: check if profile name is empty]
                                    [step 3: further breaking of names into units by comparing membership name and accrual name]
                                    [step 5: first level name validation]
                            [...]
                            [returns isMatching boolean]
                    [else if nameChkFlg == N]
                        AccrualValidatorImpl.checkNameMatch-865
                            [check if paxFamilyname and persFamilyname is similar or paxGivenName and persFamilyName is similar]
                    [if checkName returns false]
                        [auto reject name mismatch]
                        AccrualValidatorImpl.checkAutoRejNameMisMatch-840
                            ParticipantRefData.checkAutoRejNameMisMatch--[check if flight date is between the auto_rej_dates]
            [if code share]
                AccrualValidatorImpl.getStarPartnerFlag-1403
                    AccrualData.getStarPartnerFlag--[returns hashmap]
            [if passEligChk == true]
                AirAccrualImpl.checkAirEligibility-5058-[to perform air eligibility checks before accruing miles to members, checks include checks for codeshare flight, checkResidencyExclusion, checkFlightExclusion and validateTravelCls]
                    [deconstruct the parameters into separate obj]
                    AirAccrualImpl.checkAirlineCode-5282-[returns boolean isMI]
                        [checks if airlineCode == MI]
                    [if !isMi && isCodeShare && (accrualFlg == FP) || accrualFlg == F]
                        AccrualValidatorImpl.check3Star-814-[returns true, hierarchy done]
                    [if customer is not pending or OFFP]
                        AccrualValidatorImpl.setResidencyExclusionFlg-707-[residency exclusion checks]
                            AccrualValidatorImpl.getPrt-1450-[hierarchy done]
                            AccrualValidatorImpl.getRegionCountry-794-[returns map containing region and ctry key]
                                [if regionCd and ctryCd == null, default pass eligibility and return acrTxn end]
                            [if ctryCd not null] [country exclusion checks]
                                AccrualValidatorImpl.checkExclDetails-511-[returns a list hierarchy done]
                                    [if list is not empty]
                                        AccrualValidatorImpl.chkFltExclLst-658-[returns map, hierarchy done]
                                        [if value of Result key is false: setExclusionCheck to false and return]
                            [if regionCd not null] [region exclusion checks]
                                [same hierarchy as the country exclusion flg just the parameters passed to mtd calls is different]
                            [return acrTxn and end]
                    [if isCodeShare == false || operatingCarrier == MI or SQ] [perform flight exclusion checks for normal and sq operating flights]
                        [if passengerBookedSellingClass not empty]
                            AccrualValidatorImpl.setFlightExclusionFlg-601
                                AccrualValidatorImpl.getPrt--[hierarchy done]
                                AccrualValidatorImpl.checkExclDetails-511-[flight exclusion checks, returns a list]
                                    AccrualData.checkExclDetails-
                                    [end]
                                [if exclusion list size == 0 and prtExclInd == I]
                                    [setExclusionCheck to false and return]
                                [if exclusion list size not 0]
                                    AccrualValidatorImpl.chkFltExclLst-658-[returns a map]
                                        [if dayOfWk is empty]
                                            [if exclIncInd == E]
                                                [set flag = false]
                                        [else]
                                            AccrualValidatorImpl.checkDayOfWeek-675-[returns the day of week, friday and sunday is N, others are Y, hierarchy not important]
                                            [if exclIncInd == E and ind == Y: flag = false]
                                            [if exclIncInd == I and ind == N: flag = false]
                                            AccrualValidatorImpl.setAwardFlg-443
                                                [set the flag from flight details exclusion table]
                                        [set the Result and AccrualTrans key in the map and return]
                                    [if the "Result" key of the map is true, return true else false]
                                [end]
                        [else if bookedCompartmentClass not empty]
                            AccrualValidatorImpl.setFlightExclusionFlg-601-[hierarchy done]
                        [else]
                            AccrualValidatorImpl.setFlightExclusionFlg-601-[hierarchy done]
                    [else]
                        [if allowFltExclFlag == Y && mktCar == SQ]
                            AccrualValidatorImpl.setFlightExclusionFlg-601-[hierarchy done]
                        [else if bookedCompartmentClass not empty]
                            AccrualValidatorImpl.setFlightExclusionFlg-601-[hierarchy done]
                        [else]
                            AccrualValidatorImpl.setFlightExclusionFlg-601-[hierarchy done]
                    [if redemTag not U] [not to validate travel class when the redemption tag is U]
                        [if not KF]
                            AccrualValidatorImpl.getOFFPTravelCls-566
                                [if sellCls is empty]
                                    [strSubCbnCls = flownCls]
                                [else]
                                    [strSubCbnCls = sellCls]
                                ParticipantRefData.getValidateOFFPTravelClasses--[returns list of trvlCls]
                                [if trvlCls size != 0]
                                    [populate travelClass object]
                                [return travelClass object or null end]
                        [else]
                            AccrualValidatorImpl.getTravelCls-532
                                [if sellCls is empty]
                                    [cls = flownCls]
                                [else]
                                    cls = sellCls
                                ValidatorImpl.getTravelClass-136
                                    ReferenceData.getTravelClass-
                                [return travelClass obj if able to retrieve or return null end]
                    [if prtCd not SQ and prtCd not MI]
                        AccrualValidatorImpl.getRouteExclDetails-391
                            AccrualValidatorImpl.getPrt-1450-[hierarchy done]
                            [if ringFenceInd == Y]
                                AccrualValidatorImpl.checkExclDetails-511-[route exclusion checks, hierarchy done]
                                [if exclDtLst size not 0]
                                    [if flightDtlExcl obj not null and flightDtlExcl.getIncExclInd == E]
                                        AccrualValidatorImpl.updateExclFlgs-488
                                            [if ffpAwdFlg == Y, set to N, else set to Y]
                                            [if eliteAwdFlg == Y set to N, else set to Y]
                                    AccrualValidatorImpl.setAwardFlg-443-[hierarchy done]
                                [return acrTxn and end]
                    [set up updated accrualPax obj and return and end]
            [set the cabin class in code share object, used in duplicate check to see if already credited to the same class]
            [if passEligChk == true]
                AirAccrualImpl.validateTravelClsforCodeShare-5299
                    [if payPrinciple is null, set to "O"]
                    [if payPrinciple == O]
                        [prtCd = cdShr.getCarrier]
                    [else]
                        [prtCd = cdShr.getCdSharePrtCd]
                    [if prtCd != null]
                        ValidatorImpl.getTravelClass-136-[returns a list of travelClass obj, hierarchy done]
                        [extract the cabincls object from trvlCls obj and return cabinCls]
                [if cabinCls == null]
                    AirAccrualImpl.createRejTxn-3264-[hierarchy done]
                [else]
                    AccrualValidatorImpl.determinePPSElig-1355
                        [if creditClass == F || J ] [credit class is first class or business]
                            return true
                        [else if creditcls == P]
                            AccrualValidatorImpl.checkPEYCutOvr-1382
                                ControlParamData.getCtrlParaRef
                                [return true if flightDt < peyCutOvrDt and false otherwise]
                            [return true of mtd above returns true]
            [if inputModeInd != F && inputModeInd != R]
                AirAccrualImpl.chkFoundInPaxManifest-4667
                    [when air partners (non-SQ) sent in air tracking]
                    [if mkting info not found, search flight in pax.]
                    [if found check if mkting is SQ.]
                    [do a name search, if found, credit to pps else dont]
                    [If SQ mkting info found search for flight]
                    [If found credit to PPS ( No need to search Pax )]
                    [otherwise don't]
                    PaxManifestServiceImpl.searchFlight-151-[returns a list of flightInfo objects]
                        PaxMFlightInfoData.searchFlight
                    PaxManifestServiceImpl.searchPassengerByTicketNo-134
                        PaxMFlightInfoData.searchPassengerByTicketNo-
                    PaxManifestServiceImpl.searchPassenger-47
                        [get the passenger based on the flight ref id and the passenger first name and last name]
                        [first do a full name match, if cannot find will find a full family name and 1st char of given name match]
                        PaxManifestServiceImpl.searchPaxMPassenger-118
                            PaxMFlightInfoData.searchPassenger
                    [end]
            [determine the pps eligibility]
            [if non-retro, perform the pax manifest chk]
            [else perform pps check for retro]
                [check whether only pps input ind is sent, if so, accrue to ffp else createRejTrans]
            AccrualValidatorImpl.getPrt-1450-[hierarchy done]
            AirAccrualImpl.setAwardFlgFromPrt-3821
                [to obtain the award flags from participant VO]
                [update the values into AccrualTrans VO]
            [Setting Prt FFP Awd flag in acrTxn for SQ Codeshare Flights]
            [Setting Prt FFP Awd flag in acrTxn]
            [Setting Prt Elite Awd flag in acrTxn]
            AirAccrualImpl.updatePtsFlg-3833-[update the award flags accordingly after the checks]
                [perform update the ffp, elite and pps flags]
                [according to the flags from prt and flt_dtls_excl tables]
                [once the flags are set to N, it will not be overridden to Y]
            [perform duplicate check if other checks have passed]
            [if passEligChk && transCd == TC]
                AirAccrualImpl.airAccrualDupChk-3934
                    [perform air duplicate checks for accrual]
                    [including checkAirDuplicate and checkOFFPDuplicate]
                    AccrualValidatorImpl.checkAirDuplicate--[hierarchy done]
                    [if list returned is not empty]
                        AirAccrualImpl.checkAccrualBucketFlg-4013
                            [check the bucket flags after the flags set from prt and flt_dtls_excl tables]
                            [against the at_trans and offp_bill_trans, update the flags accordingly]
                            [if record found in at_trans and at_trans's ffp/elite/pps flags == Y, it is considered a duplicate record]
                            [if duplicate found, then compare the cabin class with present cabin class, and if it is the same, award accordingly]
                    [else]
                        AirAccrualImpl.checkAccrualBucketFlgNoDup-4168
                            [to check the bucket flags after the flags set from prt and flt_dtls_excl tables against the input indicators]
                            [update the flags accordingly]
            [else if passEligChk && transCd == AC]
                AirAccrualImpl.nonAirAccrualDupChk-4777
                    [to perform air duplicate checks for accrual]
                    [checks include checkAirDuplicate]
                    AccrualData.checkNonAirDuplicate--[returns boolean flg to indicate if record is found at at_trans, if found, not eligible for accrual]
            [generate transaction xref id]
            AirAccrualImpl.getATTransId-3361-[to get seq no from sq_at_trans]
                AccrualData.getATTransId
            UtilServiceImpl.getTransRefId-24-[hierarchy done]
            [if inputModeInd == N && channel == B]      
                [if passEligChk] [for accruals only]
                    [if channel == AB || channel == B ...] [AB is for the name mismatch batch program]
                        [if isPPS && ppsBktFlg == Y]
                            AirAccrualImpl.checkPPSEligibility-5339
                                AccrualData.checkPPSEligibility
                            AirAccrualImpl.matchDefSegVal-5357
                                [deconstruct accrualPax obj]
                                [if passEligChk == false || ppsAward != Y]
                                    [return and end]
                                [if cabinCls == null]
                                    AirAccrualImpl.getCabinClass-5405
                                        [retrieve prtCd and creditCls from cdShr obj]
                                        [if prtCd != null && creditCls == null && ticketInfo != null]
                                            AccrualValidatorImpl.determineCreditCls-53-[returns credit class obj, hierarchy done]
                                        [if prtCd != null && creditCls != null]
                                            ValidatorImpl.getTravelClass-136-[returns a list of travelClass obj, hierarchy done]
                                            [return travelClass.getCabinCls]
                                AirAccrualImpl.deriveDefSegVal-5442-[returns creditValue]
                                    AirAccrualImpl.deriveDefSegValInternal-5463
                                        AirAccrualImpl.determineClsForPPSCredit-5497-[returns clsForPPS]
                                            ValidatorImpl.getTravelClass-136-[returns a list of travelClass obj, hierarchy done]
                                            [returns travelClass.getCabinCls]
                                        AirAccrualImpl.retrieveSubClass-5528-[returns subclsForPPS]
                                            AccrualValidatorImpl.determineCreditCls-53-[returns creditCls]
                                                ValidatorImpl.checkOFFPTravelClass-118
                                                    ReferenceData.checkOFFPTravelClass
                                                AccrualValidatorImpl.determineCreditClassBySellingCls-337
                                                    [name is descriptive enough]
                                                    ValidatorImpl.getTravelClass-136-[hierarchy done]
                                                AccrualValidatorImpl.determineCreditCls-269
                                                    [eligible class for crediting is determined by voluntary / involuntary tag, passenger tag, redemption tag upgrade / downgrade tag]
                                                    [if upgDowngrdTag == U || D]
                                                        [if volInvTag == I]
                                                            AccrualValidatorImpl.determineCreditClsPaxRedemTag-99
                                                                [called by determineCreditCls]
                                                                [pass in flown compartment class]
                                                                [cases catered for GS - Go show, NR - NoRec]
                                                                AccrualValidatorImpl.checkCutOverForSINKUL-239-[returns cutOverFlg]
                                                                    ControlParamImpl.getString-17
                                                                        ControlParamData.getCtrlParaRef-
                                                                    [if flightTime >= cutOverDate]
                                                                        [return cutOverFlg = true]
                                                                    [else return cutOverFlg = false]
                                                                AccrualValidatorImpl.checkPEYCutOvr-1382-[returns boolean peyCutOvrFlg, hierarchy done]
                                                                [various checks to set the creditCls and return creditCls]
                                                                [end]
                                                    [if redemTag == U]
                                                        AccrualValidatorImpl.determineCreditClsPaxRedemTag-99-[returns creditclass, hierarchy done]
                                            ValidatorImpl.getTravelClass-136-[returns a list of travelClass obj, hierarchy done]
                                            [returns travelClass.getSubcls and end]
                                        AccrualData.deriveDefSegVal-
                                [setPpsValue and ppsVslueSrcInd of acrTxn]
                                [acrTxn.setAccrualStatus = A if accrualStatus == P]
                                [end]
                        [if passEligChk]
                            AirAccrualImpl.processAccruals-5574
                                [compute mileage and award mileage]
                                [billing records are created, once the accrual is done, the accrual status of passenger is updated accordingly]
                                PaxManifestServiceImpl.getFlightDetails-29
                                    PaxMFlightInfoData.getFlightDetails
                                [pass eligibility and at least one of the bucket == Y, the buckets refer to ffp, elite, pps, or cps: corporate]
                                [if acrTxn.getPassEligChk == true and hasBktFlg(acrTxn) == true]
                                    [obtain the tier indicator to compute tier bonus]
                                    [if ffpBktFlg == Y]
                                        [check if tier bonus records for the participant exists]
                                        ValidatorImpl.getTierBonus-105-[returns list of bonus records]
                                            ReferenceData.getTierBonus
                                        [if bonus record list not empty]
                                            TierHandlerImpl.getTierBonusEligibility-34
                                                TierHandlerImpl.getPPSCustomerData-179-[search in customer pps data, returns customerTier obj]
                                                    QualificationData.getPPSRecordFromView
                                                    QualificationData.getPPSRecord
                                                [if tierBonusStartDate and tierBonusEndDate not null and tierBonusStartDate is before flightDate]
                                                    [if tierBonusEndDate is after flightDate]
                                                        [set retVal to cusTier.getTierStatus]
                                                    [else if qlfyEndDate == tierBonusEndDate]
                                                        AccrualData.getPASOnHoldDays
                                                        [setting retVal from cusTier.getTierStatus if ...]
                                                [if retVal == null]
                                                    [search in customer elite data]
                                                    TierHandlerImpl.getEliteCustomerData-126
                                                        QualificationData.getEliteRecordFromView
                                                        QualificationData.getEliteRecord
                                                    [series of logic to check dates and set retVal]
                                                    [if retVal still null]
                                                        QualificationData.checkEliteHistoryForTierBonusEligibility--[set retVal]
                                                [returns retVal and end]
                                            [check if member is eligible for elite miles, if tier is null, awardTierFlg = false]
                                        [compute mileage, not required for AC trans code as member has passed in the mileage]
                                        [if transCd != AC]
                                            AirAccrualImpl.computeMileage-6919-[compute mileage to award the mileage in accrual process]
                                                AirAccrualImpl.getReferenceCd-7870-[returns keyword]
                                                    ReferenceData.getReferenceRecCd
                                                [set the FFPA float value depending on the keyword returned]
                                                [if creditCls == K && tktDt not null && (prtCd == SQ || prtCd == MI) && ffpCode == SQ]
                                                    AirAccrualImpl.checkForKCabinCutover-7889-[returns fltDt]
                                                        ControlParamImpl.getString--[hierarchy done]
                                                AirAccrualImpl.calculateMilesAndBonus-7019-[calculate the miles and bonus for a given origin and destination]
                                                    [The class array for which the miles need to be calculated is passed in]
                                                    [The method is used for Accrual Calculator and TPF interface and in SQ/ MI accruals]
                                                    AirAccrualImpl.getAirportList-7927
                                                        ValidatorImpl.getAirportList-93
                                                            ReferenceData.getAirports
                                                    AccrualValidatorImpl.checkPEYCutOvr-1382-[hierarchy done]
                                                    AirAccrualImpl.setBonusAndClsM-7246
                                                        [set the bonus and class multiplier values]
                                                        [for each class that is passed in an array. The class multiplier]
                                                        [and bonus values are taken from the trvl_cls and tier_bonus tables based on the flight date passed]
                                                        [Flight date is null in case of AccrualCalculator]
                                                        ValidatorImpl.getTravelClass--[hierarchy done]
                                                        ValidatorImpl.getTierBonus--[hierarchy done]
                                                    AirAccrualImpl.checkIfFixedMlesRule-7408
                                                        AccrualData.checkIfFixedMlesRule
                                                    [if not isFixedMilesRule]
                                                        AirAccrualImpl.getAccrualCalcRule-7395
                                                            AccrualData.getAccrualCalcRule
                                                        AirAccrualImpl.getDollarValueForScoot-7372
                                                            AccrualData.getDollarValueForScoot
                                                    AirAccrualImpl.getFixedMiles-7957
                                                        AccrualData.getFixedMiles
                                                    [logic to set the eliteBonus, ppsBonus]
                                                    AirAccrualImpl.getPPSSector-7501
                                                        [get the pps sector based on the gcd value]
                                                        [the pps sector value is based on a range within which the gcd value falls]
                                                        [The range and their values are provided in AccrualConstant.j]
                                                        [end]
                                                    ValidatorImpl.getTravelClass--[hierarchy done]
                                                    [return accrualCalculator]
                                                [end]
                                        ControlParamData.getCtrlParaRef
                                        [if prtCd == TR && eliteBktFlg == Y && transCd != AC && eliteTRSwitch == Y]
                                            [awardTREliteMiles = true]
                                            [setEliteBktFlg == N]
                                        AirAccrualImpl.awardMileage-5759-[award mileage to the passenger in accrual process]
                                            AirAccrualImpl.checkAirlineCode--[hierarchy done]
                                            [if isMI && not isKF]
                                                AccrualValidator.getPrtForMI-821
                                                    AccrualData.getPrtForMI
                                            [set values in points for different updates like qualifications, ffp accrual etc. Not required for AC trans as member has passed in the miles]
                                            [if transCd != AC]
                                                AirAccrualImpl.setAccrualPointsValues-6068-[set accrualPoints obj from accrualCalculator]
                                                    [if exclNonExpMilesFlg == N or null or empty String]
                                                        AirAccrualImpl.getNonExpiryMilesPrd-6310
                                                            ReferenceServiceImpl.getValidityPrdFromCusId-56
                                                                ReferenceServiceImpl.getTierStatusOfKF-190-[returns cusTier]
                                                                    CustomerAcctData.getTierStatusOfKF
                                                                ReferenceServiceImpl.getIntID-167
                                                                    CustomerAcctData.getIntID
                                                                ReferenceServiceImpl.getTierStatusofPrincipalID-241-[returns prinCusTier]
                                                                    CustomerAcctData.getTierStatusofPrincipalID
                                                                [multiple if statements to check cusTier and prinCusTier and assign airlineTier accordingly]
                                                                ReferenceServiceImpl.getValidityPrdFromTier-261-[returns nonExpflg]
                                                                    ReferenceData.getReferenceExt
                                                                [returns validityPrd = 99 if nonExpFlg == Y and end]
                                                    [else]
                                                        ValidatorImpl.getCtrlParaObject--[hierarchy done]
                                                        AirAccrualImpl.checkRdpnPaxTag-6225
                                                            PaxMFlightInfoData.checkRdpnPaxTag--[to award PWM for upgraded tkt, returns upgradeMMKFlg]
                                                        [if redemptionPaxTag == K || U and upgradeMMKFlg == K]
                                                            AirAccrualImpl.getFareDetailsForPPSAccrual-6289-[get the net fare paid and total fare value from Rdpn_trans and rdpn_pax_air tables using ticket num]
                                                                AccrualData.getFareDetailsForPPSAccrual
                                                            [accrual logic to set the tierbonus and miles from cash spent on tickets]
                                                        AirAccrualImpl.getPromoCodeforGvnRwdNo-6266-[get promoCode, hierarchy done]
                                                        ReferenceServiceImpl.searchReference-223-[hierarchy done, get list of promoDesc]
                                                        [set the miles with promoCode and return accrualPax and end]
                                                [if vchrNumber not empty string]
                                                    [if isKF]
                                                        AirAccrualImpl.doubleMilesPromotion-7588
                                                            AirAccrualImpl.getVchrPaxDetails-7727
                                                                CustomerData.getVchrPaxDetails
                                                            [if voucherStatusDb == null || empty string]
                                                                [set doubleMilesElig = false]
                                                                AirAccrualImpl.insertIntoCusRwdLog-7739-[insert rwd vchr not present in DB constant]
                                                                    CustomerData.insertIntoCusRwdLog
                                                            [if voucherStatusDb != null && not empty String, check voucher type mismatch]
                                                                AirAccrualImpl.insertIntoCusRwdLog-7739-[hierarchy done, insert different constants for 3 if checks]
                                                                AirAccrualImpl.changeRewardStatus-7992-[hierarchy done]
                                                            [else if check whether the voucher status is available]
                                                                AirAccrualImpl.insertIntoCusRwdLog--[hierarchy done]
                                                                AirAccrualImpl.changeRewardStatus--[hierarchy done]
                                                                RewardServiceImpl.createEventLog-434
                                                                    RewardsData.getValuefrmRule
                                                                    EventLogServiceImpl.createEventLog--[hierarchy done]
                                                            [else if pax details are not available, it will compare the intid tagged]
                                                                AccrualValidatorImpl.checkNameMatchNew-930-[hierarchy done]
                                                                AirAccrualImpl.insertIntoCusRwdLog--[hierarchy done]
                                                                AirAccrualImpl.changeRewardStatus--[hierarchy done]
                                                                RewardServiceImpl.createEventLog--hierarchy done
                                                            [else if check whether the voucher status is already used]
                                                                AirAccrualImpl.insertIntoCusRwdLog--[hierarchy done]
                                                            [else if check whether the status is suspended]
                                                                AirAccrualImpl.insertIntoCusRwdLog--[hierarchy done]
                                                            [returns doubleMilesElig and end]
                                                    [else]
                                                        AirAccrualImpl.doubleMilesPromotionForOFFP-7757
                                                            AirAccrualImpl.getVchrPaxDetails--[hierarchy done]
                                                            AirAccrualImpl.insertIntoCusRwdLog--[hierarchy done]
                                                            AirAccrualImpl.changeRewardStatus--[hierarchy done]
                                                            RewardServiceImpl.createEventLog--[hierarchy done]
                                                    [if not eligibleForDblMilesPromotion]
                                                        [set double miles promo points to 0]
                                            [if ffpAwdFlg == Y && isKF]
                                                [ffp bucket and credit to SQ only]
                                                [if pendingCustomer]
                                                    AirAccrualImpl.createOrUpdatePndgAcct-2865--[hierarchy done]
                                                    [if awardTierFlg == true]
                                                        AirAccrualImpl.getATTransId--[hierarchy done]
                                                        UtilServiceImpl.getTransRefId--[hierarchy done]
                                                    AirAccrualImpl.accrueFFPMileage-945-[perform update ffp points in pointsHandler, hierarchy done]
                                            [if transCd != AC]
                                                [award elite and pps for qualification]
                                                [if ffpAwdFlg == N && isKF && (ppsAwdFlg == Y || eliteAwdFlg == Y)]
                                                    [if isPendingCust]
                                                        AirAccrualImpl.createOrUpdatePndgAcct-2865-[create or update record into table cus_pndg]
                                                            [set up pendingCustomer obj]
                                                            PendingCustomerData.updatePndgTxn--[update]
                                                            PendingCustomerData.insertPndgTxn--[insert if update failed]
                                                AirAccrualImpl.awardElitePPS--[hierarchy done]
                                                [Only Revenue Tracking is applicable if cabin class is Y else both PPS and Revenue Tracking are applicable]
                                                AirAccrualImpl.updatePpsRevenueTracker-1322-[hierarchy done]
                                            [if !KF && ffpAwdFlg == Y]
                                                [create offp trans and offp bill trans]
                                                AirAccrualImpl.createOFFPTransaction-7819
                                                    [to insert record into table offp_extrc_trans]
                                                    [generate transXrefID for the record]
                                                    AirAccrualImpl.getATTransId--[hierarchy done]
                                                    UtilServiceImpl.getTransRefId--[hierarchy done]
                                                    AirAccrualImpl.createOFFPExtractTransaction-7846-[insert record into table offp_extrc_trans]
                                                        AirAccrualImpl.convertOFFPBillTrans-6613
                                                            [retrieve family and given name from pax manifest]
                                                            [P inficate from pax manifest]
                                                            [set the class info in codeShareFlightInfo]
                                                            [set up offpBillTrans and return end]
                                                        OFFPAccrualData.createOFFPTransaction
                                                AirAccrualImpl.createOFFPBillTrans-6578-[insert record into table offp_bill_trans]
                                                    UtilServiceImpl.getTransRefId--[hierarchy done]-[generate transaction xrefid if there is no xref id]
                                                    AirAccrualImpl.convertOFFPBillTrans--[hierarchy done]
                                                    OFFPAccrualData.createOFFPBillTrans
                                                    [returns transRefId]
                                            [if isKF]
                                                [create TC transaction in at_trans for members accrue to KF]
                                                AirAccrualImpl.getPPSOnHoldTrans-6543-[returns accrualPax]
                                                    AccrualData.getPPSOnHoldTrans
                                                [if returnedAccrualPax != null && eliteAwdFlg == N && ppsAwdFlg == Y]
                                                    AirAccrualImpl.createPPSLinkedTrans-6511
                                                        [to create pps trans in at_trans table and link to elite/ffp trans by PPS_XREF_ID]
                                                        AccrualData.createAirTrans
                                                        AccrualData.updatePPSOnHoldFlg
                                                        [end]
                                                [else]
                                                    AirAccrualImpl.createAirTrans-6323-[to insert record into at_trans]
                                                        AccrualData.createAirTrans
                                                    [if ffpAwdFlg == N && eliteAwdFlg == N && ppsAwdFlg == Y]
                                                        AirAccrualImpl.updateLastActivityDt-6350
                                                            [update the member acct status, for dormant status, plastic card will be issued if member only has paper card]
                                                            [for enrolled status, new card will be issued]
                                                            PointsHandlerImpl.updateMileageSum--[hierarchy done]
                                            [if awardTierFlg == true && isKF]
                                                [create tier bonus and eligible for those accrue to KF]
                                                AirAccrualImpl.getPromoDesc-6488-[derived promo desc from whether eliteBonusFactor or ppsBonusFactor or eliteBonusValue or ppsBonusValue more than 0, hierarchy done]
                                                AirAccrualImpl.createTierPromoBonus-1001
                                                    UtilServiceImpl.getTransRefId--hierarchy done
                                                    PromotionAwardingData.createPromotionTransaction
                                                    [if prtTypeInd == A]
                                                        [create a record in trans_bucket_pts for air accrual only]
                                                        AirAccrualImpl.createTransPts-1108
                                                            [create TransBucketPoints obj from parameters]
                                                        PointsHandlerImpl.insertTransBucketPts--[hierarchy done]
                                            [if isEligibleForDblMilesPromotion]
                                                AirAccrualImpl.createDblMilesPromoBonus-6383
                                                    ReferenceServiceImpl.searchReference-223
                                                        RefTableData.searchReference-
                                                    AirAccrualImpl.getPromoCodeforGvnRwdNo-6266
                                                        RewardsData.getPromoCodeforGvnRwdNo
                                                    [get promotion description]
                                                    [if dblPromoBonus > 0]
                                                        AirAccrualImpl.getATTransId--[hierarchy done]
                                                        UtilServiceImpl.getTransRefId--[hierarchy done]
                                                        AirAccrualImpl.createPromoAwd-1139
                                                            [set up promotionAward obj from parameters]
                                                        PromotionAwardingData.createPromotionTransaction
                                                        AirAccrualImpl.createTransPts-1108-[hierarchy done]-[create transBucketPoints obj]
                                                        PointsHandlerImpl.insertTransBucketPts--[hierarchy done]
                                                        RewardServiceImpl.getVleByRwdNo--[hierarchy done]
                                                        AirAccrualImpl.changeRewardStatus--[hierarchy done]
                                                        RewardServiceImpl.createEventLog-426-[hierarchy done]
                                            [if ppsAwdFlg == Y && !isKF]
                                                [insert or update prt_cus_at_offp_pts table for members accrue to OFFP]
                                                AirAccrualImpl.updateLastActivityDt-6350-[hierarchy done]
                                                [if pendingCustomer]
                                                    AirAccrualImpl.createOrUpdatePndgAcct--[hierarchy done]
                                                [if ffpAwdFlg == Y || (ffpCrDt != null && ffpRreverseDt == null)]
                                                    PointsHandlerImpl.updatePrtCusATOFFPPts--[hierarchy done]-[to update prt_cus_at_offp_pts]
                                                    PointsHandlerImpl.updatePrtAtOffpMthPts--[hierarchy done]-[update or insert by prtCd and processingMth into prt_at_offp_mth_pts]
                                                [To retain back the same values for ffp and elite. Gave bind variables not set error in updatePaxRecord when this not done.]
                                                [Also, PaxManifest DAO is changed to check on only ffp flag to update ffp code credit, no etc.]
                                                [OFFP member eligible for PPS, set FFP Flag and Elite Flag to N]
                                                AirAccrualImpl.createAirTrans-6323-[hierarchy done]
                                            [if isNameMismatch]
                                                [for name unmatch cases, create name unmatch record]
                                                AirAccrualImpl.createNameUnMatchRec--hierarchy done
                                            [end]
                                        [if awardTREliteMiles]
                                            AirAccrualImpl.getATTransId-3361-[hierarchy done]
                                            UtilServiceImpl.getTransRefId-24-[hierarchy done]
                                            AirAccrualImpl.awardMileage-5759-[hierarchy done]
                                            AirAccrualImpl.isRedemptionTkt-6243-[returns boolean]
                                                PaxMFlightInfoData.isRedemptionTkt--[to award PWM for upgraded ticket]
                                            [if isRedemptionTkt && isSilkAirFlight || SQFlight]
                                                RewardServiceImpl.getBirthdayRewardsSQ-54
                                                    RewardServiceImpl.getBirthdayRewardsData-289-[returns rewardDetail obj]
                                                        RewardsData.getDOB--[get birthdate from cus_pers]
                                                        RewardsData.getTierStatus--[get tier status gold or silver from cus_account]
                                                        RewardsData.checkEligibleForBirthdayReward--[check eligibility for reward, birthday month +3 <= travel month]
                                                        [if eligible]
                                                            [do the validity check]
                                                            RewardsData.getRwdNumber--[get the reward number]
                                                            RewardsData.getBirthdayRewardDetails--[get the birthday reward details]
                                                            RewardsData.getAccountStatus--
                                                            RewardsData.checkRewardApplied--
                                                            [if accountStatus == A || D || E]
                                                                [if rewardStatus == AC && rewardDetail not null]
                                                                    [set up reward detail]
                                                                    RewardsData.insertIntoRwdTrans--
                                                        [return rewardDetail and end]
                                                    RewardsData.getAtTransInfo--[returns promoAwardList]
                                                    [if promoAward not null] [has award]
                                                        [set promoCode in promotionAward obj from rewardDetail obj]
                                                        [switch over the different promoCode and set the miles to the PromotionAward obj]
                                                        RewardsData.awardBDRewards-
                                                        RewardsData.updateRewardStatus
                                                        RewardServiceImpl.updatePoints-206
                                                            [create FfpPoints obj from parameters]
                                                            PointsHandlerImpl.updateFfpPts-480-[hierarchy done]
                                                        RewardServiceImpl.updateTransTablesForPromoXRefId-232
                                                            RewardsData.updatePromoXrefIdATTrans--[returns boolean of whether the update happened]
                                                            RewardsData.updatePromoXrefIdNATTrans--[update for non air if the previous update did not occur]
                                                            CommonUtilFunctions.sendEventData-[hierarchy done]
                                                            [end]
                                                    [end]
                                            [if isKF || !isKF && ppsBktFlg == Y]
                                            AirAccrualImpl.updateAcctStatus-2979-[hierarchy done]
                                        [return accrualPax and end]
                            [if member found in pax]
                                PaxManifestServiceImpl.updatePaxRecord-206[hierarchy done]
                                PaxManifestServiceImpl.updatePaxAccrualStatus-186
                                    PaxMFlightInfoData.updatePaxAccrualStatus
                    [else if channel == B && passengerInfo.isNameMismatch && gracePrd != 0]
                        AirAccrualImpl.createOnHoldTxn-2609
                            AccrualData.createOnHoldTxn
                [if !passEligChk && getRejReasonCd.size > 0]
                    AirAccrualImpl.createRejTxn-3264-[hierarchy done]
            [else]
                [for paxManifest][retro, do not handle hold case]
                [if passEligChk]
                    [if "Y".equals(acrPts.getPPSBktFlg()) && acrPts.getPpsValue() > 0]
                        AirAccrualImpl.checkCutOverForFSC-2277-[returns chkForCutOverDate]
                            [if flightDt >= cutOverDate return true]
                            [else return false]
                        [if chkForCutOverDate == true]
                            AirAccrualImpl.searchFscValInfo-2481
                                AirAccrualImpl.searchPAS-2340
                                    [if carrierCode not null]
                                        [if disruptedFltInd == Y]
                                            AirAccrualImpl.searchPASForDisrptdFlt-2313
                                                AccrualData.searchPASForDisrptdFlt
                                                [loop over list and return pasTicket is ticketNumber is found]
                                            [return and end]
                                        [else if disruptedFltInd == N]
                                            AirAccrualImpl.searchPASInternal-2463
                                                AccrualData.searchPAS
                                                [return pasTicket]
                                        [else]
                                            [if fltNumStr not empty string]
                                                [if fltNumStr.length == 4]
                                                    AirAccrualImpl.searchPASForDisrptdFlt-2313-[hierarchy done]
                                                    AirAccrualImpl.searchPASInternal--[hierarchy done]
                                                [see method for more information]
                                                [end]
                                [if carrierCode != null]
                                    AirAccrualImpl.getFSCValFromDB-8375-[to get default FSC with POS if FSC for ticketed POS is unavailable]
                                        AccrualData.deriveDefFscVal
                                [get exchange rate from PAS_EXCHG_RATE]
                                [if curr_cd != SGD]
                                    RedemptionEnquiryServiceImpl.deriveExchgRt-21
                                        RedemptionReferenceData.getExchgRate
                                [end]
                            [if defFscVal.get("fscCredit) == null]
                                [set error code]
                            [else]
                                [if paxMTicketInfo.redemptionPaxTag == K]
                                    AirAccrualImpl.doPPSAccrual-2212
                                        [if accrualPoints != null && paxMTicketInfo]
                                            AirAccrualImpl.getFareDetailsForPPSAccrual-6289
                                                AccrualData.getFareDetailsForPPSAccrual--[to get the net fare paid and total fare value from RDPN_TRANS and RDPN_PAX_AIR tables using ticket number]
                                        [set ppsValue and set FscValue into acrTxn]
                            [check for error code]
                                AirAccrualImpl.checkIfRejTxnExists-8013
                                    AccrualData.checkIfRejTxnExists
                                [if rejTxn not exist]
                                    AirAccrualImpl.createRejTxn-2661-[hierarchy done]
                    [if "Y".equals(acrPts.getPPSBktFlg()) && acrPts.getPpsValue() <= 0 && !("O".equals(acrPts.getPpsValueSrcInd()))]
                        AirAccrualImpl.searchProValInfo-8029-[try to retrieve pps val]
                            [if ((tktNo == null || tktNo.length() == 0) && (altTktNo == null || altTktNo.length() == 0))]
                                [set the errorCode and rsncode and crSrcInd]
                            [if crSrcInd == P]
                                AirAccrualImpl.searchPAS--[returns pasTicket, hierarchy done]
                                [retry to searchPAS using alternate ticket number if pasTicket is null]
                            AirAccrualImpl.checkCutOverForFSC--[returns chkForCutOverDate, hierarchy done]
                            [if ...]
                            [else if chkForCutOverDate == true]
                                AirAccrualImpl.searchFscValInfo--[hierarchy done]
                            [if crSrcInd == P && pasTicket.getTktNo == null]
                                [set crSrcInd, errorcode and rsnCode]
                            [if crSrcInd == P]
                                AirAccrualImpl.computePASSegVal-8338
                                    AirAccrualImpl.getValtoDetCreditVal-8362
                                        AccrualData.getValtoDetCreditVal
                            [if crSrcInd == D]
                                AirAccrualImpl.checkIfWithinPASOnHoldDays-8286-[returns boolean]
                                    AccrualData.getPASOnHoldDays
                                    AirAccrualImpl.getDateWithoutTime--[hierarchy not important]
                                AirAccrualImpl.deriveDefSegVal--[hierarchy done]
                            [some other setting of local variables, see if important]
                            [set up the result map and return]
                        [if error code == N2428 ...]
                            [checkIfRejTxnExists and createRejTxn]
                        [else if !isOnHold && pasTicket != null]
                            [setting acrTxn]
                            [if acrTxn.paxMTicketInfo.redemptionPaxTag == K]
                                AirAccrualImpl.doPPSAccrual-2212-[hierarchy done]
                            [if errorCode != null]
                                AirAccrualImpl.createWarningTrans-8394
                                    AccrualData.createWarningTrans
                            [isFoundSQ]
                                PaxManifestServiceImpl.updatePaxProRatedFareForRetro-166
                                    PaxMFlightInfoData.updatePaxProRatedFareForRetro
                    AirAccrualImpl.processAccruals-5574-[hierarchy done]
                    [if isFoundSQ]
                        PaxManifestServiceImpl.updatePaxRecord-206-[hierarchy done]                